class Player:
    def __init__(self, symbol):
        self.symbol = symbol

class TicTacToeBoard:
    def __init__(self, size):
        self.size = size
        self.board = [[' ' for _ in range(size)] for _ in range(size)]

    def display_board(self):
        for row in self.board:
            print(' | '.join(row))
            print('-' * (4 * self.size - 1))

    def make_move(self, row, col, player):
        if 0 <= row < self.size and 0 <= col < self.size and self.board[row][col] == ' ':
            self.board[row][col] = player.symbol
            return True
        else:
            return False

    def is_winner(self, player):
        # Check rows, columns, and diagonals for a win
        for i in range(self.size):
            if all(self.board[i][j] == player.symbol for j in range(self.size)) or \
               all(self.board[j][i] == player.symbol for j in range(self.size)):
                return True

        if all(self.board[i][i] == player.symbol for i in range(self.size)) or \
           all(self.board[i][self.size - 1 - i] == player.symbol for i in range(self.size)):
            return True

        return False

    def is_board_full(self):
        return all(self.board[i][j] != ' ' for i in range(self.size) for j in range(self.size))


class TicTacToeGame:
    def __init__(self, size):
        self.size = size
        self.players = [Player('X'), Player('O')]
        self.current_player = 0
        self.board = TicTacToeBoard(size)

    def switch_player(self):
        self.current_player = 1 - self.current_player # stores the index of the current element

    def play_game(self):
        while True:
            self.board.display_board()
            print(f"Player {self.players[self.current_player].symbol}'s turn.")

            row = int(input("Enter the row (0 to n-1): "))
            col = int(input("Enter the column (0 to n-1): "))

            if self.board.make_move(row, col, self.players[self.current_player]):
                if self.board.is_winner(self.players[self.current_player]):
                    self.board.display_board()
                    print(f"Player {self.players[self.current_player].symbol} wins!")
                    break
                elif self.board.is_board_full():
                    self.board.display_board()
                    print("It's a draw!")
                    break
                else:
                    self.switch_player()
            else:
                print("Invalid move. Try again.")
                


size = int(input("Enter the size of the board: "))

# Validate the input to ensure it's a positive integer
while size <= 0:
    print("Invalid size. Please enter a positive integer.")
    size = int(input("Enter the size of the board: "))

# Create the TicTacToeGame instance with the specified size
game = TicTacToeGame(size)

# Start the game
game.play_game()

