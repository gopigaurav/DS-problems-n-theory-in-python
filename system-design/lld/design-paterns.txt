

-- Strategy design pattern


-- refer the concept and coding youtube video for this
-- Use case when the child wants the feature which is not present in base class


--
# Define a family of algorithms

class SortingStrategy:
    def sort(self, data):
        pass

class BubbleSort(SortingStrategy):
    def sort(self, data):
        print("Sorting using Bubble Sort")
        # Implementation of Bubble Sort algorithm

class QuickSort(SortingStrategy):
    def sort(self, data):
        print("Sorting using Quick Sort")
        # Implementation of Quick Sort algorithm

class MergeSort(SortingStrategy):
    def sort(self, data):
        print("Sorting using Merge Sort")
        # Implementation of Merge Sort algorithm

# Context class that uses the strategy

class SorterContext:
    def __init__(self, strategy):
        self.strategy = strategy

    def set_strategy(self, strategy):
        self.strategy = strategy

    def perform_sort(self, data):
        self.strategy.sort(data)

# Client code

data_to_sort = [5, 2, 8, 1, 7]

# Use Bubble Sort strategy
bubble_sort_strategy = BubbleSort()
sorter = SorterContext(bubble_sort_strategy)
sorter.perform_sort(data_to_sort)

# Change strategy to Quick Sort
quick_sort_strategy = QuickSort()
sorter.set_strategy(quick_sort_strategy)
sorter.perform_sort(data_to_sort)

# Change strategy to Merge Sort
merge_sort_strategy = MergeSort()
sorter.set_strategy(merge_sort_strategy)
sorter.perform_sort(data_to_sort)

--

###################################################################################################################

-- Decorator pattern


-- https://www.youtube.com/watch?v=w6a9MXUwcfY&list=PL6W8uoQQ2c61X_9e6Net0WdYZidm7zooW&index=6


--
from abc import ABC, abstractmethod

class BasePizza(ABC):
    @abstractmethod
    def cost(self):
        pass

class PlainPizza(BasePizza):
    def cost(self):
        return 10  # Base cost for a plain pizza

class MargaritaPizza(BasePizza):
    def cost(self):
        return 12  # Cost for Margarita pizza

class PizzaDecorator(BasePizza):
    def __init__(self, pizza):
        self._pizza = pizza

    @abstractmethod
    def cost(self):
        pass

class TomatoSauceDecorator(PizzaDecorator):
    def cost(self):
        return self._pizza.cost() + 2

class CheeseDecorator(PizzaDecorator):
    def cost(self):
        return self._pizza.cost() + 3

class PepperoniDecorator(PizzaDecorator):
    def cost(self):
        return self._pizza.cost() + 4

# Example usage:
margarita_pizza = MargaritaPizza()
print(f"Cost of Margarita pizza: ${margarita_pizza.cost()}")

decorated_pizza = TomatoSauceDecorator(CheeseDecorator(PepperoniDecorator(PlainPizza())))
print(f"Cost of decorated pizza: ${decorated_pizza.cost()}")

--


###################################################################################################################################


-- Factory Pattern

-- U can use this pattern when u want the object to be created based on the condition


--
# Product interface
class Animal:
    def speak(self):
        pass

# Concrete Products
class Dog(Animal):
    def speak(self):
        return "Woof!"

class Cat(Animal):
    def speak(self):
        return "Meow!"

# Factory class
class AnimalFactory:
    def create_animal(self, animal_type):
        if animal_type == "Dog":
            return Dog()
        elif animal_type == "Cat":
            return Cat()
        else:
            raise ValueError("Invalid animal type")

# Client code
factory = AnimalFactory()
dog = factory.create_animal("Dog")
cat = factory.create_animal("Cat")

print(dog.speak())  # Output: Woof!
print(cat.speak())  # Output: Meow!

--

###############################################################################################################################################


-- Abstract pattern


-- It is a Fatory of Factories
--


--
# Abstract Product interfaces
class Animal:
    def speak(self):
        pass

class Color:
    def fill(self):
        pass

# Concrete Products
class Dog(Animal):
    def speak(self):
        return "Woof!"

class Cat(Animal):
    def speak(self):
        return "Meow!"

class White(Color):
    def fill(self):
        return "White"

class Black(Color):
    def fill(self):
        return "Black"

# Abstract Factory interface
class AbstractFactory:
    def create_animal(self):
        pass

    def create_color(self):
        pass

# Concrete Factory
class PetFactory(AbstractFactory):
    def create_animal(self):
        return Dog()

    def create_color(self):
        return White()

# Client code
factory = PetFactory()
dog = factory.create_animal()
color = factory.create_color()

print(dog.speak())   # Output: Woof!
print(color.fill())  # Output: White

--



--
from abc import ABC, abstractmethod

# Abstract Product 1: Button
class Button(ABC):
    @abstractmethod
    def click(self):
        pass

# Concrete Product 1A: WindowsButton
class WindowsButton(Button):
    def click(self):
        print("Windows button clicked")

# Concrete Product 1B: MacButton
class MacButton(Button):
    def click(self):
        print("Mac button clicked")

# Abstract Product 2: Checkbox
class Checkbox(ABC):
    @abstractmethod
    def check(self):
        pass

# Concrete Product 2A: WindowsCheckbox
class WindowsCheckbox(Checkbox):
    def check(self):
        print("Windows checkbox checked")

# Concrete Product 2B: MacCheckbox
class MacCheckbox(Checkbox):
    def check(self):
        print("Mac checkbox checked")

# Abstract Factory
class GUIFactory(ABC):
    @abstractmethod
    def create_button(self):
        pass
    
    @abstractmethod
    def create_checkbox(self):
        pass

# Concrete Factory 1: WindowsFactory
class WindowsFactory(GUIFactory):
    def create_button(self):
        return WindowsButton()
    
    def create_checkbox(self):
        return WindowsCheckbox()

# Concrete Factory 2: MacFactory
class MacFactory(GUIFactory):
    def create_button(self):
        return MacButton()
    
    def create_checkbox(self):
        return MacCheckbox()

# Director (Optional)
class UIManager:
    def __init__(self, factory):
        self.factory = factory

    def build_ui(self):
        button = self.factory.create_button()
        checkbox = self.factory.create_checkbox()
        return button, checkbox

# Client
if __name__ == "__main__":
    # Create an application with Windows UI
    windows_factory = WindowsFactory()
    windows_ui_manager = UIManager(windows_factory)
    windows_button, windows_checkbox = windows_ui_manager.build_ui()
    windows_button.click()
    windows_checkbox.check()

    # Create an application with Mac UI
    mac_factory = MacFactory()
    mac_ui_manager = UIManager(mac_factory)
    mac_button, mac_checkbox = mac_ui_manager.build_ui()
    mac_button.click()
    mac_checkbox.check()

--

#####################################################################################################################


-- Chain of responsibility

--
The Chain of Responsibility design pattern is a behavioral pattern that allows an 
object to pass a request along a chain of potential handlers. 
This pattern decouples senders and receivers of requests and allows multiple objects to handle a request without the sender
 needing to know which object will ultimately process it. Each handler in the chain has a reference to the next handler 
in the sequence.
--


--
class AuthenticationHandler:
    def __init__(self, next_handler=None):
        self.next_handler = next_handler

    def authenticate(self, username, password):
        raise NotImplementedError("Subclasses must implement authenticate method")

class UsernamePasswordHandler(AuthenticationHandler):
    def authenticate(self, username, password):
        if username == "user1" and password == "password1":
            print("UsernamePasswordHandler: User authenticated successfully")
            return True
        elif self.next_handler:
            return self.next_handler.authenticate(username, password)
        else:
            print("UsernamePasswordHandler: Authentication failed")
            return False

class OTPHandler(AuthenticationHandler):
    def authenticate(self, username, password):
        if username == "user2" and password == "123456":
            print("OTPHandler: User authenticated successfully")
            return True
        elif self.next_handler:
            return self.next_handler.authenticate(username, password)
        else:
            print("OTPHandler: Authentication failed")
            return False

class BiometricHandler(AuthenticationHandler):
    def authenticate(self, username, password):
        if username == "user3" and password == "fingerprint":
            print("BiometricHandler: User authenticated successfully")
            return True
        elif self.next_handler:
            return self.next_handler.authenticate(username, password)
        else:
            print("BiometricHandler: Authentication failed")
            return False

# Client
def login(username, password):
    handler_chain = UsernamePasswordHandler(next_handler=OTPHandler(next_handler=BiometricHandler()))
    handler_chain.authenticate(username, password)

# Testing the login system
login("user1", "password1")  # Output: UsernamePasswordHandler: User authenticated successfully
login("user2", "123456")     # Output: OTPHandler: User authenticated successfully
login("user3", "fingerprint") # Output: BiometricHandler: User authenticated successfully
login("user4", "password4")  # Output: UsernamePasswordHandler: Authentication failed

--


#########################################################################################################################################

-- Singleton Pattern


-- https://www.youtube.com/watch?v=tSZn4wkBIu8&list=PLlsmxlJgn1HJpa28yHzkBmUY-Ty71ZUGc&index=2

--
Only one instance of the class is allowed
--

-- First one uses the thread locking in python for the all the scenarios
import threading

class Singleton:
    _instance = None
    _lock = threading.Lock()
    _initialized = False

    @classmethod
    def get_instance(cls):
        if not cls._initialized:  # Check if instance has been initialized
            with cls._lock:  # Acquire the lock to ensure thread safety during initialization
                if not cls._initialized:  # Double check if instance has been initialized
                    cls._instance = cls()  # Create the instance
                    cls._initialized = True  # Mark instance as initialized
        return cls._instance

--


--
import threading

class Singleton:
    _instance = None
    _lock = threading.Lock()

    @classmethod
    def get_instance(cls):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = cls()
        return cls._instance

    def __init__(self):
        if self._instance is not None:
            raise ValueError("An instance of this class already exists.")

        # Initialize any attributes here
        self.value = 0

    def increment(self):
        self.value += 1

# Example usage
singleton1 = Singleton.get_instance()
singleton2 = Singleton.get_instance()

print(singleton1 is singleton2)  # Output: True, both variables point to the same instance

singleton1.increment()
print(singleton1.value)  # Output: 1

singleton2.increment()
print(singleton2.value)  # Output: 2
print(singleton1.value)  # Output: 2, both variables reference the same object

--


###################################################################################################################################


-- Builder Pattern

-- https://www.youtube.com/watch?v=DcFhITC9v0E&list=PLlsmxlJgn1HJpa28yHzkBmUY-Ty71ZUGc&index=6
--

--
# Product class
class Product:
    def __init__(self):
        self.part1 = None
        self.part2 = None
        # other parts
    
    # methods to set parts
    def set_part1(self, part1):
        self.part1 = part1
    
    def set_part2(self, part2):
        self.part2 = part2
    
    # other methods

# Builder interface
class Builder:
    def build_part1(self, part1):
        pass
    
    def build_part2(self, part2):
        pass
    
    # other build methods
    def get_product(self):
        pass

# Concrete Builder
class ConcreteBuilder(Builder):
    def __init__(self):
        self.product = Product()
    
    def build_part1(self, part1):
        self.product.set_part1(part1)
    
    def build_part2(self, part2):
        self.product.set_part2(part2)
    
    def get_product(self):
        return self.product

# Director (optional)
class Director:
    def __init__(self, builder):
        self.builder = builder
    
    def construct(self):
        self.builder.build_part1("Part 1")
        self.builder.build_part2("Part 2")
        # other build steps

# Client code
if __name__ == "__main__":
    builder = ConcreteBuilder()
    director = Director(builder)
    
    director.construct()
    product = builder.get_product()
    
    # Use the product

--




=====================================================================================================================================