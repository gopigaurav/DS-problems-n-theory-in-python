-- https://docs.google.com/spreadsheets/d/1Pud-vdSPhhljScynHvTUGRE5yxEV6dCMb45rOwoSt_Q/edit#gid=0


-- Watering plants (40)

-- https://leetcode.com/problems/watering-plants/
--


--
class Solution(object):
    def wateringPlants(self, plants, cap):
        """
        :type plants: List[int]
        :type cap: int
        :rtype: int
        """
        n = len(plants)
        cnt = cap
        res = 0
        i = 0
        while i < n:
            if plants[i] > cap:
                return -1
            
            if plants[i] <= cnt:
                cnt -= plants[i]
            else:
                res += i * 2
                cnt = cap - plants[i]
            i += 1
        return res + i
--


============================================================================================

-- Majority Element (Moores algo) (42) 


-- https://www.geeksforgeeks.org/problems/majority-element-1587115620/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=bottom_sticky_on_article
-- https://www.geeksforgeeks.org/majority-element/
 

--
#User function template for Python 3
from collections import defaultdict

class Solution:
    def majorityElement1(self, A, N):
        #Your code here
        
        # u can do it using Moore voting algo 
        # or u can use hashmaps for this, lets do both
        
        
        # Moores Algo
        
        # first get the majority element and then check for the frequency is greater than 
        # the n // 2
        
        majority_index = 0
        majority_num_count = 1
        
        for i in range(N):
            if A[i] != A[majority_index]:
                majority_num_count -= 1
                
                if majority_num_count == 0:
                    majority_index = i
                    majority_num_count = 1
            else:
                majority_num_count += 1
        
        cnt = 0 # to get the total frequency of the element
        
        for i in range(N):
            if A[majority_index] == A[i]:
                cnt += 1
        
            if cnt > (N // 2):
                return A[majority_index]
        
        return -1
        
        
    

    # Using Hashmaps
    def majorityElement(self, A, N):
        #Your code here
        
        # u can do it using Moore voting algo 
        # or u can use hashmaps for this, lets do both
        
        
        # Moores Algo
        
        # first get the majority element and then check for the frequency is greater than 
        # the n // 2
        
        
        m = defaultdict(int)
        
        cnt = 0 # to get the total frequency of the element
        
        for i in range(N):
            m[A[i]] += 1
        
        
        for key in m:
            if m[key] > (N // 2):
                return key
        
        return -1
--



##################### Linked List  ============================================================================================


-- Cycle in a linkedlist

-- https://www.geeksforgeeks.org/problems/circular-linked-list/1?page=1&difficulty%5B%5D=-1&category%5B%5D=Linked%2520List&sortBy=submissions
--

--
def isCircular(head):
    # Code here
    
    # two point are needed to check for the circle in linkedlist
    
    # x -> traverls normally
    # y -> travels with speed twice the x
    
    x = head
    y = head.next
    
    while x != y:
        if not y or not y.next:
            return 0
        x = x.next
        y = y.next.next
    
    return 1
--

======================================================================================================================


-- Insert in a Sorted List


-- https://www.geeksforgeeks.org/problems/insert-in-a-sorted-list/1?page=1&difficulty%5B%5D=0&category%5B%5D=Linked%2520List&sortBy=submissions
--

--
class Solution:
    def sortedInsert(self, head1,key):
        # code here
        # return head of edited linked list
        
        
        head = head1
        node = Node(key)
        
        if not head:
            return node
            
        prev = None
        
        while head:
            if head.data >= key:
                break
            else:
                prev = head
                head = head.next
            
        if prev:
            temp = prev.next
            prev.next = node
            node.next = temp
        else:
            temp = head1
            head1 = node
            node.next = temp
        
        return head1
                
--

========================================================================================================================================


-- Insert in the Middle of the linked list


-- https://www.geeksforgeeks.org/problems/insert-in-middle-of-linked-list/1?page=1&difficulty%5B%5D=-1&category%5B%5D=Linked%2520List&sortBy=submissions
--


--
def insertInMid(head,node):
    #code here
    
    x = head
    y = head.next
    
    
    while y and y.next:
        x = x.next
        y = y.next.next
        
    if x:
        temp = x.next
        x.next = node
        node.next = temp
    
    return head
--


==========================================================================================================================================

-- delete node in doubly linked list


-- https://www.geeksforgeeks.org/problems/delete-node-in-doubly-linked-list/1?page=1&difficulty%5B%5D=-1&category%5B%5D=Linked%2520List&sortBy=submissions
--


--
class Solution:
    def deleteNode(self,head, x):
        # Code here
        
        if not head:
            return None
        
        if x == 1:
            temp = head.next
            return temp
        
        temp = head
        delNode = None
        
        while temp:
            if  x == 1:
                delNode = temp
            
            x -= 1
            temp = temp.next
        
        if delNode:
            prev = delNode.prev
            prev.next = delNode.next
        
        return head
--


===============================================================================================================================

-- Count the length of the loop in linked list


-- https://www.geeksforgeeks.org/problems/find-length-of-loop/1?page=1&difficulty%5B%5D=0&category%5B%5D=Linked%2520List&sortBy=submissions
-- https://www.geeksforgeeks.org/find-length-of-loop-in-linked-list/


--
def countNodesinLoop(head):
    
    #Your code here
    
    slow = head
    fast = head
    if head == None or head.next == None:
        return 0

    #assign while loop and checks both are equal
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            break

    # if both are not equal return 0
    if slow != fast:
        return 0

    # In last node we starting counting each elements which are connected to the loop
    slow = slow.next
    count = 1
    while slow != fast:
        count += 1
        slow = slow.next
    return count
--


===============================================================================================================================

-- Intersection of two sorted Linked lists

-- https://www.geeksforgeeks.org/problems/intersection-of-two-sorted-linked-lists/1?page=1&difficulty%5B%5D=0&category%5B%5D=Linked%2520List&sortBy=submissions
-- https://www.geeksforgeeks.org/intersection-of-two-sorted-linked-lists/


--
class Solution:
    def findIntersection(self,head1,head2):
        #return head
        
        dummy = Node(0)
        result = dummy
        
        while head1 and head2:
            if head1.data == head2.data:
                dummy.next = Node(head1.data)
                dummy = dummy.next
                
                head1 = head1.next
                head2 = head2.next
            
            elif head1.data < head2.data:
                head1 = head1.next
            
            else:
                head2 = head2.next
        
        return result.next
--


===============================================================================================================================

-- Rotate a linked list

-- https://www.geeksforgeeks.org/problems/rotate-a-linked-list/1?page=1&difficulty%5B%5D=1&category%5B%5D=Linked%2520List&sortBy=submissions
--


--
class Solution:
    
    #Function to rotate a linked list.
    def rotate(self, head, k):
        # code here
        
        if not head:
            return head
        
        temp = head
        
        cnt = 1
        dummy = None
        while temp:
            if cnt == k:
                dummy = temp
                break
            cnt += 1
            temp = temp.next
          
        
        if dummy and not dummy.next:
            return head
        
        if dummy and dummy.next:
            temp = dummy.next
            dummy.next = None
            
            temp1 = temp
            
            while temp.next:
                temp = temp.next
            
            
            temp.next = head
            head = temp1
    
                
        
        return head
--


==============================================================================================================================

-- Check if the Linked list is plaindrome


-- https://www.geeksforgeeks.org/problems/check-if-linked-list-is-pallindrome/1?page=1&difficulty%5B%5D=1&category%5B%5D=Linked%2520List&sortBy=submissions
-- https://www.geeksforgeeks.org/function-to-check-if-a-singly-linked-list-is-palindrome/


--
class Solution:
    def isPalindrome(self, head):
        #code here
        
        slow = head
        fast = head
        mid_pointer = None
        
        if not head or not head.next:
            return 1
            
        
        while fast and fast.next:
            prev_slow = slow
            slow = slow.next
            
            fast = fast.next.next
            
        
        def reverse(node):
            if not node:
                return node
            
            cur = node
            prev = None
            nxt = node
            
            while cur:
                
                nxt = cur.next
                cur.next = prev
                prev = cur
                cur = nxt
            
            return prev
            
        
        def compair_node(node1, node2):
            
            while node1 and node2:
                if node1.data != node2.data:
                    return False
                node1 = node1.next
                node2 = node2.next
            
            
            if node1 or node2:
                return False
            return True
                
        
        
        if fast:
            mid_pointer = slow
            slow = slow.next
        
        prev_slow.next = None
        
                
        second_half = slow 
        
        reversed_node = reverse(second_half)
        
        temp = head
        
        if compair_node(temp, reversed_node):
            return 1
        
        return 0
--


==============================================================================================================================

-- Intersection Point in Y shaped linked lists


-- https://www.geeksforgeeks.org/problems/intersection-point-in-y-shapped-linked-lists/1?page=1&difficulty%5B%5D=1&category%5B%5D=Linked%2520List&sortBy=submissions
-- https://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/


--
def intersetPoint(head1,head2):
    #code here
    
    # Use two pointer to check for the intersection
    # once any pointer hits the end then exchange the pointers
    
    p1 = head1
    p2 = head2
    
    if (p1 == None or p2 == None):
        return None
    
    while p1 != p2:
        
        p1 = p1.next
        p2 = p2.next
        
        if p1 == p2:
            if p1:
                return p1.data
            return -1
            
        if not p1:
            p1 = head2
        
        if not p2:
            p2 = head1
            
        
    if p1:
        return p1.data
    
    return -1
--


==================================================================================================================================

-- Reverse k alternate nodes in linked list (code not completed)


-- https://www.interviewbit.com/problems/reverse-alternate-k-nodes/hints/
-- https://www.geeksforgeeks.org/reverse-alternate-k-nodes-in-a-singly-linked-list/

--
class Solution:
    # @param A : head node of linked list
    # @param B : integer
    # @return the head node in the linked list
    def solve(self, head, k):
        
        temp = head
        nxt = head
        
        def reverse(node):
            
            tail = node
            cur = node
            prev = None
            nxt = node
            
            while cur:
                
                nxt = cur.next
                cur.next = prev
                prev = cur
                cur = nxt
                
            return tail, prev
        
        cnt = 0
        cur = None
        prev = None
        nxt = None
        toggle = True
        new_head = None
        
        while temp:
            cnt += 1
            temp = temp.next
            
            if cnt == k:
                toggle = not toggle
                cnt = 0
                
            if toggle:
                if cur:
                    cur.next, prev, cur = reverse(cur)
                else:
                    new_head, prev, cur = reverse(head)
            else:
                prev = temp
        
        return new_head

--


==================================================================================================================================
