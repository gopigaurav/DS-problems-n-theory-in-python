

-- https://chatgpt.com/c/4d9eee5d-c596-42aa-958c-df5931ff5cf1
-- (Abhishek vermalla) https://www.youtube.com/watch?v=JoHUi9KvnOA&t=1840s

Kubernetes - It is container orchestratio platform



Docker Cons: 
-- Container can die and revive any time (Single host)
-- No Auto healing (Container wont start by itself)
-- Auto Scaling (No feature to scale up)
-- No loadbalancer inbuilt (No way to distribute the traffic)
-- No enterprise level support


What is Enterprise ready:
1. Load balancer
2. Firewall
3. Auto scale
4. Auto Healing
5. Api Gateway



Kubernetes Pro:

-- Kubernetes is installed as clusters
-- Kubernetes has replica sets to handle the traffic
-- Auto Healing
-- Enterprise Level support
-- Kubernetes offers fecilities for containers to talk with each other
-- Container running on multiple hosts can be connected to each other





============================ Inside Kubernetes  ================================================================
Key Concepts


Cluster: A set of nodes (machines) where Kubernetes runs. A cluster consists of:

Master Node: Manages the cluster, schedules the workloads, and maintains the desired state.
Worker Nodes: Run the containers.
Pods: The smallest deployable units in Kubernetes, usually containing one or more containers.

Services: Define how to expose the pods to the network, ensuring communication both internally and externally.

Deployments: Define the desired state for pods and their scaling behavior.

Namespaces: Provide a way to divide cluster resources between multiple users.







=========================  Docker container commands  =======================================================================================================

-- https://chatgpt.com/c/4d9eee5d-c596-42aa-958c-df5931ff5cf1

-- Container commands

Create and run a container from an image, with a custom name:
docker run --name <container_name> <image_name>

Run a container with and publish a containerâ€™s port(s) to the host.
docker run -p <host_port>:<container_port> <image_name>

Run a container in the background
docker run -d <image_name>

Start or stop an existing container:
docker start|stop <container_name> (or <container-id>)

Remove a stopped container:
docker rm <container_name>

Open a shell inside a running container:
docker exec -it <container_name> sh

Fetch and follow the logs of a container:
docker logs -f <container_name>

To inspect a running container:
docker inspect <container_name> (or <container_id>)

To list currently running containers:
docker ps


List all docker containers (running and stopped):
docker ps --all


View resource usage stats
docker container stats
