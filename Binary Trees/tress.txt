-- Symmetric tree

-- https://practice.geeksforgeeks.org/problems/symmetric-tree/1/#
-- https://www.geeksforgeeks.org/symmetric-tree-tree-which-is-mirror-image-of-itself/
-- Kashish mahindrata
-- https://www.youtube.com/watch?v=kgAAfIB_358&list=PLNxqWc8Uj2LRbsOlBiPJZAyZpaUwdDepd



class Solution:
    # return true/false denoting whether the tree is Symmetric or not
    def isSymmetric(self, root):
        if not root: return True
        def mirror(l,r):
            if not l and not r: return True
            if not l or not r: return False
            if l.data != r.data: return False
            
            return (mirror(l.left,r.right) and mirror(l.right,r.left))
        return mirror(root.left,root.right)


-- method 2

# Python program to check if a
# given Binary Tree is symmetric or not

# Node structure


class Node:

  # Utility function to create new node
  def __init__(self, key):
    self.key = key
    self.left = None
    self.right = None

# Returns True if trees
#with roots as root1 and root 2 are mirror


def isMirror(root1, root2):
  # If both trees are empty, then they are mirror images
  if root1 is None and root2 is None:
    return True

  """ For two trees to be mirror images,
    the following three conditions must be true
    1 - Their root node's key must be same
    2 - left subtree of left tree and right subtree
    of the right tree have to be mirror images
    3 - right subtree of left tree and left subtree
    of right tree have to be mirror images
  """
  if (root1 is not None and root2 is not None):
    if root1.key == root2.key:
      return (isMirror(root1.left, root2.right)and
          isMirror(root1.right, root2.left))

  # If none of the above conditions is true then root1
  # and root2 are not mirror images
  return False


def isSymmetric(root):

  # Check if tree is mirror of itself
  return isMirror(root, root)


# Driver Code
# Let's construct the tree show in the above figure
root = Node(1)
root.left = Node(2)
root.right = Node(2)
root.left.left = Node(3)
root.left.right = Node(4)
root.right.left = Node(4)
root.right.right = Node(3)
print ("Symmetric" if isSymmetric(root) == True else "Not symmetric")

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)




=========================================================================================================

-- Zig Zag traversal



-- https://www.geeksforgeeks.org/zigzag-tree-traversal/
-- https://www.youtube.com/watch?v=iJT9JrrFQ44&list=PLNxqWc8Uj2LRbsOlBiPJZAyZpaUwdDepd&index=6
-- https://practice.geeksforgeeks.org/problems/zigzag-tree-traversal/1/#

# two stacks used here
class Solution:
    #Function to store the zig zag order traversal of tree in a list.
    def zigZagTraversal(self, root):
        res = []
        s1 = []
        s2 = []
        s1.append(root)
        while len(s1) or len(s2):
            while s1:
                temp = s1.pop()
                res.append(temp.data)
                if temp.left: s2.append(temp.left)
                if temp.right: s2.append(temp.right)
            while s2:
                temp = s2.pop()
                res.append(temp.data)
                if temp.right: s1.append(temp.right)
                if temp.left: s1.append(temp.left)
        return res



========================================================================================================================

-- 


