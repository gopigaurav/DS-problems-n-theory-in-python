-- Symmetric tree

-- https://practice.geeksforgeeks.org/problems/symmetric-tree/1/#
-- https://www.geeksforgeeks.org/symmetric-tree-tree-which-is-mirror-image-of-itself/
-- Kashish mahindrata
-- https://www.youtube.com/watch?v=kgAAfIB_358&list=PLNxqWc8Uj2LRbsOlBiPJZAyZpaUwdDepd



class Solution:
    # return true/false denoting whether the tree is Symmetric or not
    def isSymmetric(self, root):
        if not root: return True
        def mirror(l,r):
            if not l and not r: return True
            if not l or not r: return False
            if l.data != r.data: return False
            
            return (mirror(l.left,r.right) and mirror(l.right,r.left))
        return mirror(root.left,root.right)


-- method 2

# Python program to check if a
# given Binary Tree is symmetric or not

# Node structure


class Node:

  # Utility function to create new node
  def __init__(self, key):
    self.key = key
    self.left = None
    self.right = None

# Returns True if trees
#with roots as root1 and root 2 are mirror


def isMirror(root1, root2):
  # If both trees are empty, then they are mirror images
  if root1 is None and root2 is None:
    return True

  """ For two trees to be mirror images,
    the following three conditions must be true
    1 - Their root node's key must be same
    2 - left subtree of left tree and right subtree
    of the right tree have to be mirror images
    3 - right subtree of left tree and left subtree
    of right tree have to be mirror images
  """
  if (root1 is not None and root2 is not None):
    if root1.key == root2.key:
      return (isMirror(root1.left, root2.right)and
          isMirror(root1.right, root2.left))

  # If none of the above conditions is true then root1
  # and root2 are not mirror images
  return False


def isSymmetric(root):

  # Check if tree is mirror of itself
  return isMirror(root, root)


# Driver Code
# Let's construct the tree show in the above figure
root = Node(1)
root.left = Node(2)
root.right = Node(2)
root.left.left = Node(3)
root.left.right = Node(4)
root.right.left = Node(4)
root.right.right = Node(3)
print ("Symmetric" if isSymmetric(root) == True else "Not symmetric")

# This code is contributed by Nikhil Kumar Singh(nickzuck_007)




=========================================================================================================

-- Zig Zag traversal



-- https://www.geeksforgeeks.org/zigzag-tree-traversal/
-- https://www.youtube.com/watch?v=iJT9JrrFQ44&list=PLNxqWc8Uj2LRbsOlBiPJZAyZpaUwdDepd&index=6
-- https://practice.geeksforgeeks.org/problems/zigzag-tree-traversal/1/#

# two stacks used here
class Solution:
    #Function to store the zig zag order traversal of tree in a list.
    def zigZagTraversal(self, root):
        res = []
        s1 = []
        s2 = []
        s1.append(root)
        while len(s1) or len(s2):
            while s1:
                temp = s1.pop()
                res.append(temp.data)
                if temp.left: s2.append(temp.left)
                if temp.right: s2.append(temp.right)
            while s2:
                temp = s2.pop()
                res.append(temp.data)
                if temp.right: s1.append(temp.right)
                if temp.left: s1.append(temp.left)
        return res



========================================================================================================================

-- Balanced Binary Tree

-- https://www.interviewbit.com/problems/balanced-binary-tree/
-- https://www.geeksforgeeks.org/how-to-determine-if-a-binary-tree-is-balanced/
-- https://www.youtube.com/watch?v=5q42f32rvLs&list=PLNxqWc8Uj2LRbsOlBiPJZAyZpaUwdDepd&index=9
-- https://practice.geeksforgeeks.org/problems/check-for-balanced-tree/1/#


=================================================================================================================================================================

-- Diameter of BT

-- https://www.geeksforgeeks.org/diameter-of-a-binary-tree/
-- https://practice.geeksforgeeks.org/problems/diameter-of-binary-tree/1

-- refer this
-- https://leetcode.com/problems/diameter-of-binary-tree/submissions/

--

class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        def height(root):
            nonlocal diameter
            if not root:
                return 0
            
            left = height(root.left)
            right = height(root.right)
            diameter = max(diameter, left + right)
            return max(left, right) + 1
        
        diameter = 0
        height(root)
        return diameter

=======================================================================================================================================

-- check if Binary tree is identical

-- https://practice.geeksforgeeks.org/problems/determine-if-two-trees-are-identical/1/
-- https://www.geeksforgeeks.org/write-c-code-to-determine-if-two-trees-are-identical/
--
class Solution:
    #Function to check if two trees are identical.
    def isIdentical(self,root1, root2):
        if not root1 and not root2: return True
        if not root2 or not root1: return False
        if root1.data != root2.data: return False
        return (self.isIdentical(root1.left,root2.left) and self.isIdentical(root1.right,root2.right))


================================================================================================================================

-- Min depth of BT

-- https://www.geeksforgeeks.org/find-minimum-depth-of-a-binary-tree/
-- https://www.interviewbit.com/problems/min-depth-of-binary-tree/


class Solution:
    def minDepth(self, root):
        if root.left is None and root.right is None:
            return 1
            
        if root.right is None:
            return 1 + self.minDepth(root.left)
            
        if root.left is None:
            return 1 + self.minDepth(root.right)
            
        return min(self.minDepth(root.left), self.minDepth(root.right)) +1


-- 
def minimumDepth(root, level):
    if (root == None):
        return level;
 
    level += 1;
     
    return min(minimumDepth(root.left, level),
                        minimumDepth(root.right, level))
=============================================================================================================================================


-- Check for subtree

-- https://practice.geeksforgeeks.org/problems/check-if-subtree/1/
-- https://www.geeksforgeeks.org/check-if-a-binary-tree-is-subtree-of-another-binary-tree/

class Solution:
    def isSubTree(self, root, S):
        q = []
        q.append(root)
        
        
        def isIdentical(A,B):
            if not A and not B: return True
            if not A or not B: return False
            if A.data != B.data: return False
            return (isIdentical(A.left, B.left) and isIdentical(A.right, B.right))
            
        while q:
            temp = q.pop(0)
            if(temp.data == S.data):
                if isIdentical(temp,S):
                    return True
            if temp.left: q.append(temp.left)
            if temp.right: q.append(temp.right)
        return False


=======================================================================================================================================================

-- Inorder traversal

-- https://www.interviewbit.com/problems/inorder-traversal/
-- https://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion/

-- iterative and  recursive


lass Solution:
    def inorderTraversal(self, root):
        self.values = []
        #self.traverse(root)
        #return self.values
        
        return self.iterative(root)
        
    def iterative(self,root):
        res = []
        stack = []
        cur = root
        while True:
            if cur is not None:
                stack.append(cur)
                cur = cur.left
            elif stack:
                cur = stack.pop()
                res.append(cur.val)
                cur = cur.right
            else:
                break
        return res
        
    def traverse(self, root):
        if root.left is None and root.right is None:
            self.values.append(root.val)
            return
        
        if root.left:    
            self.traverse(root.left)
        self.values.append(root.val)
        if root.right:
            self.traverse(root.right)



=========================================================================================================================================

-- Preorder iterative
-- https://www.geeksforgeeks.org/iterative-preorder-traversal/
-- https://www.interviewbit.com/problems/preorder-traversal/


-- 

class Solution:
    def preorderTraversal(self, root):
        self.values = []
        #self.traverse(root)
        #return self.values
        return self.iterative(root)
        
    def iterative(self,root):
        if not root: return []
        stack = []
        res = []
        stack.append(root)
        
        while stack:
            temp = stack.pop()
            res.append(temp.val)
            if temp.right:
                stack.append(temp.right)
            if temp.left:
                stack.append(temp.left)
        return res
        
        

    def traverse(self, root):
        if root is None:
            return

        self.values.append(root.val)
        self.traverse(root.left)
        self.traverse(root.right)

==================================================================================================================


-- Postorder


-- https://www.geeksforgeeks.org/iterative-postorder-traversal/
-- https://www.interviewbit.com/problems/postorder-traversal/


class Solution:
    def postorderTraversal(self, root):
        self.values = []
        #self.traverse(root)
        #return self.values
        return self.iterative(root)
        
    def iterative(self,root):
        if not root: return []
        stack1 = []
        stack2 =[]
        res = []
        stack1.append(root)
        
        while stack1:
            temp = stack1.pop()
            stack2.append(temp)
            if temp.left:
                stack1.append(temp.left)
            if temp.right:
                stack1.append(temp.right)
        while stack2:
            temp = stack2.pop()
            res.append(temp.val)
            
        return res
        
    def traverse(self, root):
        if root.left is None and root.right is None:
            self.values.append(root.val)
            return
        
        if root.left:    
            self.traverse(root.left)
        
        if root.right:
            self.traverse(root.right)
        self.values.append(root.val)


=================================================================================================

-- Vertical order traversal

-- https://www.interviewbit.com/problems/vertical-order-traversal-of-binary-tree/
-- https://www.geeksforgeeks.org/print-binary-tree-vertical-order/

-- 


import collections
class Solution:
    # @param A : root node of tree
    # @return a list of list of integers
    def verticalOrderTraversal(self, root):
        cols = collections.defaultdict(list)
        queue = [(root, 0)]
        for node, i in queue:
            if node:
                cols[i].append(node.val)
                queue += [(node.left, i - 1), (node.right, i + 1)]
        return [cols[i] for i in sorted(cols)]


==================================================================================================================


-- Construct Bt from Preorder and Inorder

-- https://www.geeksforgeeks.org/construct-tree-from-given-inorder-and-preorder-traversal/
-- https://www.youtube.com/watch?v=aZNaLrVebKQ&t=770s
-- https://practice.geeksforgeeks.org/problems/construct-tree-1/1/


--
class Solution:
    def buildtree(self, inorder, preorder, n):
        if not inorder: return None
        temp = preorder[0]
        root_index = inorder.index(temp)
        left_nodes = inorder[:root_index]
        right_nodes = inorder[root_index+1:]
        m,n = len(left_nodes),len(right_nodes)
        root = Node(temp)
        root.left = self.buildtree(left_nodes,preorder[1:m+1],n)
        root.right = self.buildtree(right_nodes,preorder[m+1:],n)
        return root


===================================================================================================================

-- Connect all nodes at same level

-- https://www.geeksforgeeks.org/connect-nodes-at-same-level/
-- https://www.youtube.com/watch?v=OLvzM1ZcbtQ


# Iterative program to connect all the adjacent nodes at the same level in a binary tree
class newnode:
  def __init__(self, data):
    self.data = data
    self.left = self.right = self.nextRight = None

# setting right pointer to next right node

#       10 ----------> NULL
#       / \
#     8 --->2 --------> NULL
#     /
#     3 ----------------> NULL
def connect(root):

  # Base condition
  if root is None:
    return
  
  # Create an empty queue like level order traversal
  queue = []
  queue.append(root)
  while len(queue) != 0:
  
    # size indicates no. of nodes at current level
    size = len(queue)
    
    # for keeping track of previous node
    prev = newnode(None)
    for i in range(size):
      temp = queue.pop(0)
      if temp.left:
        queue.append(temp.left)
      if temp.right:
        queue.append(temp.right)
      if prev != None:
        prev.nextRight = temp
        prev = temp
    prev.nextRight = None

# Driver Code
if __name__ == '__main__':

  # Constructed binary tree is
  # 10
  #   / \
  # 8   2
  # /
  # 3
  root = newnode(10)
  root.left = newnode(8)
  root.right = newnode(2)
  root.left.left = newnode(3)

  # Populates nextRight pointer in all nodes
  connect(root)

  # Let us check the values of nextRight pointers
  print("Following are populated nextRight",
    "pointers in the tree (-1 is printed",
    "if there is no nextRight)")
  print("nextRight of", root.data, "is ", end="")
  if root.nextRight:
    print(root.nextRight.data)
  else:
    print(-1)
  print("nextRight of", root.left.data, "is ", end="")
  if root.left.nextRight:
    print(root.left.nextRight.data)
  else:
    print(-1)
  print("nextRight of", root.right.data, "is ", end="")
  if root.right.nextRight:
    print(root.right.nextRight.data)
  else:
    print(-1)
  print("nextRight of", root.left.left.data, "is ", end="")
  if root.left.left.nextRight:
    print(root.left.left.nextRight.data)
  else:
    print(-1)
    
# This code is contributed by Vivek Maddeshiya

==============================================================================================================================================================

-- lowest common ancestor in BT

-- https://www.geeksforgeeks.org/lowest-common-ancestor-binary-tree-set-1/
-- https://practice.geeksforgeeks.org/problems/lowest-common-ancestor-in-a-binary-tree/1/
-- https://www.youtube.com/watch?v=_-QHfMDde90

class Solution:
    #Function to return the lowest common ancestor in a Binary Tree.
    def lca(self,root, n1, n2):
        if not root: return None
        if root.data == n1 or root.data == n2:
            return root
        lh = self.lca(root.left,n1,n2)
        rh = self.lca(root.right,n1,n2)
        
        if lh and rh: return root
        if lh: return lh
        if rh: return rh
        return None

========================================================================================================================================================

-- Boundary traversal

-- https://www.geeksforgeeks.org/boundary-traversal-of-binary-tree/
-- https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1/#


=======================================================================================================================================================



-- sum tree

-- https://practice.geeksforgeeks.org/problems/sum-tree/1/#
-- https://www.youtube.com/watch?v=-1SIodPrhss
-- https://www.geeksforgeeks.org/check-if-a-given-binary-tree-is-sumtree/

# Python3 program to check if
# Binary tree is sum tree or not

# A binary tree node has data,
# left child and right child
class node:

  def __init__(self, x):

    self.data = x
    self.left = None
    self.right = None


def isLeaf(node):

  if(node == None):
    return 0
  if(node.left == None and node.right == None):
    return 1
  return 0


# returns data if SumTree property holds for the given
# tree else return -1
def isSumTree(node):
  if(node == None):
    return 0
  
  ls = isSumTree(node.left)
  if(ls == -1):     #To stop for further traversal of tree if found not sumTree
    return -1
    
  rs = isSumTree(node.right)
  if(rs == -1):     #To stop for further traversal of tree if found not sumTree
    return -1
  
  
  if(isLeaf(node) or ls + rs == node.data):
    return ls + rs + node.data
  else:
    return -1

# Driver code
if __name__ == '__main__':

  root = node(26)
  root.left = node(10)
  root.right = node(3)
  root.left.left = node(4)
  root.left.right = node(6)
  root.right.right = node(3)

  if(isSumTree(root)):
    print("The given tree is a SumTree ")
  else:
    print("The given tree is not a SumTree ")

# This code is contributed by Mugunthan

================================================================================================================

-- BT to Doubly linked list
-- https://www.geeksforgeeks.org/in-place-convert-a-given-binary-tree-to-doubly-linked-list/
-- https://practice.geeksforgeeks.org/problems/binary-tree-to-dll/1/#

class Solution:
    head = None
    tail = None
    def bToDLL(self,root):
        if not root: return
        self.bToDLL(root.left)
        if not self.head: self.head = root
        else:
            root.left = self.tail
            self.tail.right = root
        self.tail = root
        self.bToDLL(root.right)
        return self.head

============================================================================================================================

-- Find the max path sum between two leaves of BT

-- https://www.geeksforgeeks.org/find-maximum-path-sum-two-leaves-binary-tree/


===========================================================================================================================

-- Burn tree

-- https://www.youtube.com/watch?v=dj0q8D_hPdo
-- https://github.com/aakashverma1124/Data-Structures-and-Algorithms-for-Interviews/blob/master/Python/DFS/BurningTree.py
-- https://www.geeksforgeeks.org/burn-the-binary-tree-starting-from-the-target-node/

# @author
# Aakash Verma

# Output:
# 2
# 7 4 5
# 6 3
# 1 
# 0 8 

from collections import deque

class Node:
    def __init__(self, data):
        self.data = data
        self.right = self.left = None

class BurningTree:
    
    def __init__(self): 
        self.root = None

    queue = deque([])

    def burningTree(self, root, targetNode):
        if root is None:
            return 0
        if root.data == targetNode:
            print(root.data)
            if root.left is not None:
                self.queue.append(root.left)
            if root.right is not None:
                self.queue.append(root.right)
            return 1

        left = self.burningTree(root.left, targetNode)
        if(left == 1):
            queueSize = len(self.queue)
            for i in range(queueSize):
                current = self.queue.popleft()
                print(current.data, end = " ")
                if current.left is not None:
                    self.queue.append(self.current.left)
                if current.right is not None:
                    self.queue.append(self.current.right)

            if root.right is not None:
                self.queue.append(root.right)
            print(root.data)
            return 1

        right = self.burningTree(root.right, targetNode)
        if(right == 1):
            queueSize = len(self.queue)
            for i in range(queueSize):
                current = self.queue.popleft()
                print(current.data, end = " ")
                if current.left is not None:
                    self.queue.append(self.current.left)
                if current.right is not None:
                    self.queue.append(self.current.right)

            if root.left is not None:
                self.queue.append(root.left)
            print(root.data)
            return 1

        
if __name__ == '__main__':
    tree = BurningTree()
    tree.root = Node(3)
    tree.root.left = Node(5)
    tree.root.right = Node(1)
    tree.root.left.left = Node(6)
    tree.root.left.right = Node(2)
    tree.root.right.left = Node(0)
    tree.root.right.right = Node(8)
    tree.root.left.right.left = Node(7)
    tree.root.left.right.right = Node(4)

    tree.burningTree(tree.root, 2)
    while tree.queue:
        queueSize = len(tree.queue)
        for i in range(queueSize):
            current = tree.queue.popleft()
            print(current.data, end = " ")
            if current.left is not None:
                tree.queue.append(current.left)
            if current.right is not None:
                tree.queue.append(current.right)
        print()

    

    
==================================================================================================================
        
BFS of tree

--
-- https://www.geeksforgeeks.org/level-order-tree-traversal/

# Python program to print level
# order traversal using Queue

# A node structure


class Node:
  # A utility function to create a new node
  def __init__(self, key):
    self.data = key
    self.left = None
    self.right = None

# Iterative Method to print the
# height of a binary tree


def printLevelOrder(root):
  # Base Case
  if root is None:
    return

  # Create an empty queue
  # for level order traversal
  queue = []

  # Enqueue Root and initialize height
  queue.append(root)

  while(len(queue) > 0):

    # Print front of queue and
    # remove it from queue
    print(queue[0].data)
    node = queue.pop(0)

    # Enqueue left child
    if node.left is not None:
      queue.append(node.left)

    # Enqueue right child
    if node.right is not None:
      queue.append(node.right)


# Driver Program to test above function
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)

print("Level Order Traversal of binary tree is -")
printLevelOrder(root)
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)



===========================================================================================


-- Print all paths in Binary tree

-- https://practice.geeksforgeeks.org/problems/root-to-leaf-paths/1
-- https://www.techiedelight.com/print-all-paths-from-root-to-leaf-nodes-binary-tree/
-- https://www.geeksforgeeks.org/given-a-binary-tree-print-all-root-to-leaf-paths/


--
def Paths(root):
    ans = []
    def sol(node, ans, path):
        if node is None:
            return
 
        # include the current node to the path
        path.append(node.data)
     
        # if a leaf node is found, print the path
        if node.left is None and node.right is None:
            ans.append(list(path))
            #path.pop()
            #return
     
        # recur for the left and right subtree
        sol(node.left,ans, path)
        sol(node.right,ans, path)
     
        # backtrack: remove the current node after the left, and right subtree are done
        path.pop()
 
        
    arr = []
    sol(root, ans, arr)
    return ans
--

=====================================================================================================================================

-- 