-- Merge Two sorted lists

-- https://www.interviewbit.com/problems/merge-two-sorted-lists/hints/
-- https://www.geeksforgeeks.org/merge-two-sorted-linked-lists/

--
 # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @param A : head node of linked list
    # @param B : head node of linked list
    # @return the head node in the linked list
    def mergeTwoLists(self, A, B):
        root1 = A
        root2 = B
        res = ListNode(0)
        dummy = res
        while (root1 is not None) and (root2 is not None):
            if root1.val < root2.val:
                dummy.next = ListNode(root1.val)
                root1 = root1.next
                dummy = dummy.next
            else:
                dummy.next = ListNode(root2.val)
                root2 = root2.next
                dummy = dummy.next
        if root1 is not None :
            dummy.next = root1
        elif root2 is not None:
            dummy.next = root2
        return res.next


=====================================================================================================================================================

-- Reverse a ll
-- https://www.interviewbit.com/problems/reverse-linked-list/
-- https://www.geeksforgeeks.org/reverse-a-linked-list/


-- 

class Solution:
    # @param A : head node of linked list
    # @return the head node in the linked list
    def reverseList(self, A):
        prev = None
        cur = A
        nex = None
        while cur:
           nex = cur.next
           cur.next = prev
           prev = cur
           cur = nex
        head = prev
        return head   

===============================================================================================================================================================

-- delete without head pointer

-- https://practice.geeksforgeeks.org/problems/delete-without-head-pointer/1
-- https://www.geeksforgeeks.org/delete-a-node-from-linked-list-without-head-pointer/



-- 
class Solution:
    #Function to delete a node without any reference to head pointer.
    def deleteNode(self,curr_node):
        delpos = curr_node
        delpos.data = delpos.next.data
        delpos.next = delpos.next.next
        

=================================================================================================================================================================

-- Add two numbers in linked List (Reversed) code in book b5

(Refer Neetcode)

-- https://www.youtube.com/watch?v=wgFPrzTjm7s
-- https://www.interviewbit.com/problems/add-two-numbers-as-lists/

--
class Solution:
    # @param A : head node of linked list
    # @param B : head node of linked list
    # @return the head node in the linked list
    def addTwoNumbers(self, A, B):
        a, b = A, B
        head = ListNode(0)
        cur_sum = head
        while a != None or b != None or cur_sum.val > 9:
            carry = cur_sum.val / 10
            cur_sum.val %= 10
            a_val = 0 if a == None else a.val
            b_val = 0 if b == None else b.val
            next_val = a_val + b_val + carry
            cur_sum.next = ListNode(next_val)
            cur_sum = cur_sum.next
            a = None if a == None else a.next
            b = None if b == None else b.next
        return head.next

--

=========================================================================================================================================================================

-- Add two numbers in linked lists (not reversed)in book b5

(codehelp by babber)

-- https://practice.geeksforgeeks.org/problems/add-two-numbers-represented-by-linked-lists/1
-- https://www.geeksforgeeks.org/add-two-numbers-represented-by-linked-lists/
-- https://www.youtube.com/watch?v=wgFPrzTjm7s
--

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

'''
class Solution:
    #Function to add two numbers represented by linked list.
    def addTwoLists(self, first, second):
        root1 = first
        root2 = second
        answer = Node(0)
        
        def reverse(root):
            prev = None
            cur = root
            nex = None
            while cur:
                nex = cur.next
                cur.next = prev
                prev = cur
                cur = nex
            root = prev
            return root
        revRoot1 = reverse(root1)
        revRoot2 = reverse(root2)
        carry = 0
        
        while revRoot1 or revRoot2 or carry:
            v1 = revRoot1.data if revRoot1 else 0
            v2 = revRoot2.data if revRoot2 else 0
            
            val = v1 + v2 +  carry
            carry = val // 10
            val = val % 10
            answer.next = Node(val)
            answer = answer.next
            revRoot1 = revRoot1.next if revRoot1 else None
            revRoot2 = revRoot2.next if revRoot2 else None
        dummy = Node(0)
        dummy.next = reverse(answer.next)
        return dummy.next

===================================================================================================================================

-- finding middle element

-- https://practice.geeksforgeeks.org/problems/finding-middle-element-in-a-linked-list/1/
-- https://www.geeksforgeeks.org/write-a-c-function-to-print-the-middle-of-the-linked-list/

-- 
class Solution:
    #  Should return data of middle node. If linked list is empty, then  -1
    def findMid(self, head):
        # Code here
        # return the value stored in the middle node
        fp = head
        sp = head
        while sp and sp.next != None:
            fp = fp.next
            sp = sp.next.next
        return fp.data
            
--

 
=====================================================================================================================================================

-- Palindrome linked list
-- https://leetcode.com/problems/palindrome-linked-list/submissions/
-- https://practice.geeksforgeeks.org/problems/check-if-linked-list-is-pallindrome/1/
-- https://www.youtube.com/watch?v=70tx7KcMROc&list=PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ&index=45

--
def isPalindrome(self, head):
        
        # get mid element function
        def getMid(head):
            fp = head
            sp = head
            while sp and sp.next!= None:
                fp = fp.next
                sp = sp.next.next
            return fp
        
        def reverse(second_half):
            prev = None
            current = second_half
            next = None
              
            while current != None:
                next = current.next
                current.next = prev
                prev = current
                current = next
            return prev
            
        # get the mid element 
        mid = getMid(head)
        headSecond = reverse(mid)
        
        while head and headSecond and head!= headSecond:
            if head.data != headSecond.data:
                return 0
            head = head.next
            headSecond = headSecond.next
        return 1

--

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        fast = head
        slow = head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        mid = slow
        prev = None  

        while mid:
            next_node = mid.next
            mid.next = prev
            prev = mid
            mid = next_node

        tail = prev

        while head and tail and tail != head:
            if tail.val != head.val:
                return False
            head = head.next
            tail = tail.next

        return True

-- 


===========================================================================================================================================================================

-- rearrange ll

-- https://www.geeksforgeeks.org/rearrange-a-linked-list-such-that-all-even-and-odd-positioned-nodes-are-together/
-- https://practice.geeksforgeeks.org/problems/rearrange-a-linked-list/1/


# Python3 program to rearrange a linked list
# in such a way that all odd positioned
# node are stored before all even positioned nodes

# Linked List Node
class Node:
	def __init__(self, d):
		self.data = d
		self.next = None

class LinkedList:
	def __init__(self):
		self.head = None
		
	# A utility function to create
	# a new node
	def newNode(self, key):
		temp = Node(key)
		self.next = None
		return temp

	# Rearranges given linked list
	# such that all even positioned
	# nodes are before odd positioned.
	# Returns new head of linked List.
	def rearrangeEvenOdd(self, head):
		
		# Corner case
		if (self.head == None):
			return None

		# Initialize first nodes of
		# even and odd lists
		odd = self.head
		even = self.head.next

		# Remember the first node of even list so
		# that we can connect the even list at the
		# end of odd list.
		evenFirst = even

		while (1 == 1):
			
			# If there are no more nodes,
			# then connect first node of even
			# list to the last node of odd list
			if (odd == None or even == None or
							(even.next) == None):
				odd.next = evenFirst
				break

			# Connecting odd nodes
			odd.next = even.next
			odd = even.next

			# If there are NO more even nodes
			# after current odd.
			if (odd.next == None):
				even.next = None
				odd.next = evenFirst
				break

			# Connecting even nodes
			even.next = odd.next
			even = odd.next
		return head

	# A utility function to print a linked list
	def printlist(self, node):
		while (node != None):
			print(node.data, end = "")
			print("->", end = "")
			node = node.next
		print ("NULL")
		
	# Function to insert a new node
	# at the beginning
	def push(self, new_data):
		new_node = Node(new_data)
		new_node.next = self.head
		self.head = new_node

# Driver code
ll = LinkedList()
ll.push(5)
ll.push(4)
ll.push(3)
ll.push(2)
ll.push(1)
print ("Given Linked List")
ll.printlist(ll.head)

start = ll.rearrangeEvenOdd(ll.head)

print ("\nModified Linked List")
ll.printlist(start)

# This code is contributed by Prerna Saini

==================================================================================================================================================================


-- detect and remove loop

-- https://www.geeksforgeeks.org/detect-and-remove-loop-in-a-linked-list/
-- https://practice.geeksforgeeks.org/problems/remove-loop-in-linked-list/1/#


--
class Solution:
    #Function to remove a loop in the linked list.
    def removeLoop(self, head):
        # code here
        # remove the loop without losing any nodes
        fp = head
        sp = head
        while sp and sp.next:
            fp = fp.next
            sp = sp.next.next
            if fp == sp:
                self.removeloop(fp, head)
                return 1
        return 0
    def removeloop(self, loop_node, head):
        p1 = loop_node
        p2 = loop_node
        k = 1
        # find lenght of cycle with k
        while p1.next != p2:
            p1 = p1.next
            k+=1
        p1 = head
        p2 = head
        
        # p1 points to start head and p2 k distance from head
        
        for i in range(k):
            p2 = p2.next
        
        # p1 and p2 point at the start of the loop
        while p1 != p2:
            p1 = p1.next
            p2 = p2.next
        
        # now p1 and p2 are equal
        
        while p1.next != p2:
            p1 = p1.next
        
        # now pi points to the end node of the loop
        
        # so p1.next = None
        p1.next = None

============================================================================================================================================


-- sort linked lists

-- https://practice.geeksforgeeks.org/problems/sort-a-linked-list/1/#
-- https://leetcode.com/problems/sort-list/discuss/?currentPage=1&orderBy=most_votes&query=&tag=python
-- https://leetcode.com/problems/sort-list/discuss/46710/Clean-python-code
-- (refer this) https://leetcode.com/problems/sort-list/discuss/892537/Python-by-merge-sort-w-Comment
-- https://www.geeksforgeeks.org/merge-sort-for-linked-list/



--

class Solution:
    #Function to sort the given linked list using Merge Sort.
    def mergeSort(self, head):
        if head == None or head.next == None:
            return head
        mid = self.findMiddle(head)
        left = self.mergeSort(head)
        right = self.mergeSort(mid)
        
        return self.merSort(left,right)
        
    def findMiddle(self,head):
        if (head == None):
            return head
        fp = head
        sp = head
        prev = None
        while sp and sp.next:
            prev = fp
            fp = fp.next
            sp = sp.next.next
        prev.next = None
        return fp
            
    def merSort(self,l1,l2):
        res = Node(0)
        dummy = res
        while (l1 is not None) and (l2 is not None):
            if l1.data < l2.data:
                dummy.next = Node(l1.data)
                l1 = l1.next
                dummy = dummy.next
            else:
                dummy.next = Node(l2.data)
                l2 = l2.next
                dummy = dummy.next
        if l1 is not None :
            dummy.next = l1
        elif l2 is not None:
            dummy.next = l2
        return res.next
        

--


===================================================================================================================================================

-- intersection in linked lists

-- https://practice.geeksforgeeks.org/problems/intersection-point-in-y-shapped-linked-lists/1
-- https://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/
-- https://www.youtube.com/watch?v=u4FWXfgS8jw

--
def intersetPoint(head1,head2):
    #code here
    a = head1
    b = head2
    
    while (a != b):
        a = a.next if a else head1
        b = b.next if b else head2
    
    
    return a.data
--

==============================================================================================================================================================================

-- Rotate linkedlist 

-- https://www.geeksforgeeks.org/rotate-a-linked-list/
-- https://practice.geeksforgeeks.org/problems/rotate-a-linked-list/1/


-- 
class Solution:
    
    #Function to rotate a linked list.
    def rotate(self, head, k):
        h = head
        tail = head
        while h.next:
            h = h.next
        tail = h
        h = head
        for i in range(k-1):
            h = h.next
        tail.next = head
        head = h.next
        h.next = None
        return head

--


=======================================================================================================================================================================================

-- reverse linked list in k group
-- https://www.geeksforgeeks.org/reverse-a-list-in-groups-of-given-size/
-- https://practice.geeksforgeeks.org/problems/reverse-a-linked-list-in-groups-of-given-size/1
-- https://www.youtube.com/watch?v=Of0HPkk3JgI

--
class Solution:
    # here remaining elements are also rotated
    def reverse(self,head, k):
        
        if not head or k == 1: return head
        dummy = Node(0)
        dummy.next = head

        prev = dummy
        curr = dummy
        next = dummy
        count = 0
        toLoop = 0
        i = 0
     
        # Calculating the length of linked list
        while curr:
            curr = curr.next
            count += 1
     
        # Iterating till next is not none
        while next:
            curr = prev.next  # Curr position after every reversed group
            next = curr.next  # Next will always next to curr
            # toLoop will set to count - 1 in case of remaining element
            toLoop = count > k and k or count - 1
            for i in range(1, toLoop):
                    # 4 steps as discussed above
                curr.next = next.next
                next.next = prev.next
                prev.next = next
                next = curr.next
            # Setting prev to curr
            prev = curr
            # Update count
            count -= k
     
         # dummy -> next will be our new head for output linked list
        return dummy.next
        
    # here remaining elements r left same
    def reverse(self,head, k):
        
        if not head or k == 1: return head
        dummy = Node(0)
        dummy.next = head

        cur = dummy
        pre = dummy
        nex = dummy
        
        count = 0
        
        while cur.next:
            cur = cur.next
            count +=1
        
        while count >= k:
            cur = pre.next
            nex = cur.next
            for i in range(1,k):
                cur.next = nex.next
                nex.next = pre.next
                pre.next = nex
                nex = cur.next
            pre = cur
            count -= k 
        return dummy.next

============================================================================================================================================================

-- Flatten linkedlists

-- https://practice.geeksforgeeks.org/problems/flattening-a-linked-list/1/
-- https://www.youtube.com/watch?v=ysytSSXpAI0&list=RDCMUCJskGeByzRRSvmOyZOz61ig&start_radio=1&rv=ysytSSXpAI0&t=0
-- https://www.geeksforgeeks.org/flattening-a-linked-list/

--

def flatten(root):
    # Base Case
        if(root == None or root.next == None):
            return root
        # recur for list on next
 
        root.next = flatten(root.next)
 
        # now merge
        root = merge(root, root.next)
 
        # return the root
        # it will be in turn merged with its left
        return root
        
def merge(a, b):
        # if first linked list is empty then second
        # is the answer
        if(a == None):
            return b
         
        # if second linked list is empty then first
        # is the result
        if(b == None):
            return a
 
        # compare the data members of the two linked lists
        # and put the larger one in the result
        result = None
 
        if (a.data < b.data):
            result = a
            result.bottom = merge(a.bottom,b)
        else:
            result = b
            result.bottom = merge(a,b.bottom)
 
        result.next = None
        return result

--

==================================================================================================================


