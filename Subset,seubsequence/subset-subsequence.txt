
================================= Kunal kushwaha lecture ==========================================================

1 => Skip a character in a string
2 => skip a word in a string
3=> skip "app" when not starts with apple

-----------------------
string = "baccad"

# skip a charater in string
def skipChar(n):
    if(len(n) == 0):
        return ""
    char = n[0]
    if(char == "a"):
        return skipChar(n[1:])
    else:
        return char + skipChar(n[1:])
        
# skip a word in a string
def skipWordss(n):
    if(len(n) == 0):
        return ""
    # for skip app when not equal to apple use this
    # if(n.startswith("app") and (not n.startswith("apple"))):
    if(n.startswith("apple")):
        return skipWordss(n[5:])
    else:
        return n[0] + skipWordss(n[1:])

print(skipWordss("An apple a day"))
#print(skipChar(string))

---------------------------


=================================================================================================================================================

-- print all subsequences of a string

-- https://www.geeksforgeeks.org/print-subsequences-string/
-- https://leetcode.com/problems/subsets/submissions/
-- https://www.geeksforgeeks.org/print-subsequences-string/

--
Input : abc
Output : a, b, c, ab, bc, ac, abc
--
--
class Solution(object):
    def subsets(self, nums):
        def sol(inpu, outpu, ans):
            if len(inpu) == 0:
                ans.append(outpu)
                return 
            ch =  inpu[0]
            sol(inpu[1:], outpu + [ch], ans)
            sol(inpu[1:], outpu, ans)
            
        ans = []
        res = sol(nums, [], ans)
        return ans

# method - 2
class Solution2(object):
    def subsets(self, nums):
        ret = []
        self.dfs(nums, [], ret)
        return ret
    
    def dfs(self, nums, path, ret):
        ret.append(path)
        for i in range(len(nums)):
            self.dfs(nums[i+1:], path+[nums[i]], ret)
--

=========================================================================================================================================

-- 