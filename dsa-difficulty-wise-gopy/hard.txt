-- Subarrays with k diff integers (Imp)


-- https://leetcode.com/problems/subarrays-with-k-different-integers/
--


--
class Solution:
    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:
        res = 0
        cnt = [0] * (len(nums) + 1)
        l = 0
        r= 0
        windowCnt = 0  # Current number of valid subarrays in the window

        while r < len(nums):
            if cnt[nums[r]] == 0:
                k-=1
            cnt[nums[r]] += 1

            while k < 0: 
                cnt[nums[l]] -=1
                if cnt[nums[l]] == 0:
                    k+=1
                l += 1
                windowCnt = 0

            # this helps you count the number of subarrays 
            if k == 0:
                while cnt[nums[l]] > 1:
                    cnt[nums[l]] -= 1
                    l+=1
                    windowCnt += 1

                res += (windowCnt+1)


            r +=1

        return res
--


====================================================================================================


-- Minimum number of k consecutive bit flips


-- https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/
--


--
class Solution:
    def minKBitFlips(self, nums: List[int], k: int) -> int:
        # Keeps track of flipped states
        flipped = [False] * len(nums)

        # Tracks valid flips within the past window
        validFlipsFromPastWindow = 0

        # Counts total flips needed
        flipCount = 0

        for i in range(len(nums)):
            if i >= k:
                # Decrease count of valid flips from the past window if needed
                if flipped[i - k]:
                    validFlipsFromPastWindow -= 1

            # Check if current bit needs to be flipped
            if validFlipsFromPastWindow % 2 == nums[i]:
                # If flipping the window extends beyond the array length,
                # return -1
                if i + k > len(nums):
                    return -1

                # Increment the count of valid flips and
                # mark current as flipped
                validFlipsFromPastWindow += 1
                flipped[i] = True
                flipCount += 1

        return flipCount
--


================================================================================================================

-- Longest chunked palindrome decomposition


-- https://leetcode.com/problems/longest-chunked-palindrome-decomposition/
--


--
class Solution:
    def longestDecomposition(self, text: str) -> int:
        n = len(text)
        left, right = 0, n - 1
        count = 0
        left_part, right_part = "", ""
        
        while left < right:
            left_part += text[left]
            right_part = text[right] + right_part  # Prepend to maintain order
            
            if left_part == right_part:
                # print(left_part, right_part)
                count += 2
                left_part, right_part = "", ""  # Reset after a valid split
            
            left += 1
            right -= 1

        
        if left_part != right_part or left == right:
            return count + 1
        else:
            return count
        
--

==================================================================================================================


-- Maximum level sum of a binary tree


-- https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/
--


--
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxLevelSum(self, root: Optional[TreeNode]) -> int:
        from collections import deque
        max_level = 1
        lvl = 0
        max_sum = root.val
        q = deque([root])

        while q:
            size = len(q)
            csum = 0
            lvl += 1
            for i in range(size):
                temp = q.popleft()
                csum += temp.val

                if temp.left:
                    q.append(temp.left)
                if temp.right:
                    q.append(temp.right)
            
            if csum > max_sum:
                max_sum = csum
                max_level = lvl

        return max_level
        
--


=============================================================================================================

-- As Far from land as possible


-- https://leetcode.com/problems/as-far-from-land-as-possible/description/
--


--
class Solution:
    def lastSubstring(self, s: str) -> str:
        s = list(s)
        n = len(s)
        
        # Initialize pointers
        # start by locating maximum character and its index
        start = max(s)
        i = s.index(start)
        j = i + 1
        
        while j < n:
            # Find the next candidate where s[j] >= s[i]
            while j < n and s[j] < s[i]:
                j += 1
            
            if j >= n:
                # If we have reached the end, return the substring from i
                return "".join(s[i:])
            
            # Compare substrings starting from i and j
            l, r = i + 1, j + 1
            while r < n and s[l] == s[r] and l < j:
                l += 1
                r += 1
            
            if r == n:
                # If r reached the end, the substring from i is the result
                return "".join(s[i:])
            
            # Update the index i or j based on the comparison
            if s[l] < s[r]:
                i = j
            else:
                j = r
        
        return "".join(s[i:])

    def lastSubstring1(self, s: str) -> str:
        n = len(s)
        start = max(s)
        i = s.index(start)
        j = i + 1
    
        while j < n:
            k = 0  # Offset for comparison
            while j + k < n and s[i + k] == s[j + k]:
                k += 1
            if j + k < n and s[i + k] < s[j + k]:  # Found a lexicographically greater suffix
                i = j
            j += 1  # Move to the next candidate
        
        return s[i:]
--


===========================================================================================================


-- Invalid transactions


--
-- https://leetcode.com/problems/invalid-transactions/


--
class Solution:
    def invalidTransactions(self, transactions: List[str]) -> List[str]:
        transaction_data = []
        invalid = set()

        # Parse transactions
        for i, transaction in enumerate(transactions):
            name, time, amount, city = transaction.split(',')
            transaction_data.append((name, int(time), int(amount), city, i))

        # Check first condition: Amount exceeds $1000
        for name, time, amount, city, i in transaction_data:
            if amount > 1000:
                invalid.add(i)

        # Group transactions by name
        transactions_by_name = defaultdict(list)
        for entry in transaction_data:
            transactions_by_name[entry[0]].append(entry)

        # Check second condition: Same name, different city, within 60 minutes
        for name, entries in transactions_by_name.items():
            entries.sort(key=lambda x: x[1])  # Sort by time
            for i in range(len(entries)):
                for j in range(i + 1, len(entries)):
                    if abs(entries[i][1] - entries[j][1]) <= 60 and entries[i][3] != entries[j][3]:
                        invalid.add(entries[i][4])
                        invalid.add(entries[j][4])

        return [transactions[i] for i in invalid]
--

=========================================================================================================

-- Remove zero sum consecutive noddes from linked list (Imp)


-- https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/
--


--
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeZeroSumSublists(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode(0)
        dummy.next = head
        prefix_sum = 0
        prefix_map = {0: dummy}

        current = dummy
        while current:
            prefix_sum += current.val
            prefix_map[prefix_sum] = current
            current = current.next
        # print(prefix_sum, prefix_map)

        prefix_sum = 0
        current = dummy
        while current:
            prefix_sum += current.val
            current.next = prefix_map[prefix_sum].next  # Skip nodes summing to zero
            current = current.next

        return dummy.next
        
--


========================================================================================================

-- Can make palindrome from substring (Imp)



--
-- https://leetcode.com/problems/can-make-palindrome-from-substring/


--
class Solution:
    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:
        n = len(s)
        prefix = [[0] * 26 for _ in range(n + 1)]  # 26 for lowercase 'a' to 'z'
        
        for i in range(n):
            prefix[i + 1] = prefix[i][:]  # Copy previous counts
            prefix[i + 1][ord(s[i]) - ord('a')] += 1  # Increment count of current char
        
        res = []
        
        # Step 2: Process each query in O(1)
        for left, right, k in queries:
            # Step 2a: Get the character frequency in range [left, right]
            odd_count = 0
            for j in range(26):
                if (prefix[right + 1][j] - prefix[left][j]) % 2 == 1:
                    odd_count += 1  # Count characters with odd frequency

            # Step 2b: Check if k is sufficient to balance odd counts
            if odd_count // 2 <= k:
                res.append(True)
            else:
                res.append(False)
        
        return res
        
--


=======================================================================================================


-- Make array strictly increasing


--
--


--
class Solution:
    def makeArrayIncreasing2(self, arr1: List[int], arr2: List[int]) -> int:
        from collections import defaultdict

        def binary_search(arr, target):
            """Finds the index of the first element greater than target in arr."""
            left, right = 0, len(arr) - 1
            ans = -1  # Default if no valid element is found

            while left <= right:
                mid = (left + right) // 2
                if arr[mid] > target:  # Found a candidate
                    ans = mid  # Store possible answer
                    right = mid - 1  # Look for smaller element on the left
                else:
                    left = mid + 1  # Move right to find a greater element

            return ans  # Index of the first element greater than target or -1

        arr2 = sorted(set(arr2))  # Remove duplicates and sort
        dp = {-1: 0}  # Stores (prev_value, min_operations)

        for num in arr1:
            new_dp = {}
            for prev_val, ops in dp.items():
                # Case 1: Keep num if it's strictly increasing
                if num > prev_val:
                    new_dp[num] = min(new_dp.get(num, float('inf')), ops)

                # Case 2: Replace with the smallest greater element in arr2
                idx = binary_search(arr2, prev_val)  # Use our custom binary search
                if idx != -1:  # Valid replacement found
                    new_dp[arr2[idx]] = min(new_dp.get(arr2[idx], float('inf')), ops + 1)

            if not new_dp:
                return -1  # No valid increasing sequence possible
            dp = new_dp  # Move to next state

        return min(dp.values())
        
    def makeArrayIncreasing(self, arr1, arr2):
        arr2.sort()  # Sort arr2 for binary search
        n = len(arr1)

        def binary_search(arr, target):
            """Finds the index of the first element greater than target in arr."""
            left, right = 0, len(arr) - 1
            ans = -1  # Default if no valid element is found

            while left <= right:
                mid = (left + right) // 2
                if arr[mid] > target:  # Found a candidate
                    ans = mid  # Store possible answer
                    right = mid - 1  # Look for smaller element on the left
                else:
                    left = mid + 1  # Move right to find a greater element

            return ans 

        dp = {}  # Memoization

        def helper(index, prev):
            if index == n:
                return 0  # Successfully reached the end

            if (index, prev) in dp:
                return dp[(index, prev)]

            ans = float('inf')  # Use a large value

            # Option 1: Keep arr1[index] if it maintains the increasing order
            if arr1[index] > prev:
                ans = min(ans, helper(index + 1, arr1[index]))

            # Option 2: Replace arr1[index] with a value from arr2
            next_greater = binary_search(arr2, prev)
            if next_greater != -1:
                ans = min(ans, 1 + helper(index + 1, arr2[next_greater]))

            dp[(index, prev)] = ans
            return ans

        result = helper(0, -1)
        return result if result != float('inf') else -1

    from bisect import bisect_right

    def makeArrayIncreasing3(self, arr1, arr2):
        arr2.sort()  # Sorting arr2 for binary search
        n = len(arr1)
        
        # DP table: Key = (index, changes), Value = minimum last value possible
        dp = { -1:  -1 }  # Start with -1 as the last element
        
        for num in arr1:
            new_dp = {}
            
            for key in dp:
                # Case 1: Keep the current `num` if it maintains the increasing order
                if num > dp[key]:  
                    new_dp[key] = min(new_dp.get(key, float('inf')), num)

                # Case 2: Replace `num` with the smallest larger number in `arr2`
                idx = bisect_right(arr2, dp[key])  # Find the smallest larger element in `arr2`
                if idx < len(arr2):  # If a valid replacement exists
                    new_dp[key + 1] = min(new_dp.get(key + 1, float('inf')), arr2[idx])

            if not new_dp:  
                return -1  # If no valid sequence is found

            dp = new_dp  # Move to the next iteration

        return min(dp.keys())  # Return the minimum changes required



--


=======================================================================================================


-- Reverse substrings between each pair of parenthesis 


-- https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses/submissions/1550913266/
--


--
class Solution:
    def reverseParentheses(self, s: str) -> str:
        stack = []

        for char in s:
            if char == ')':
                temp = []
                while stack and stack[-1] != "(":
                    temp.append(stack.pop())
                stack.pop() # poping the "(" bracket
                stack.extend(temp)
            else:
                stack.append(char)
        
        return ''.join(stack)
        
--


=====================================================================================================


-- K concentration maximum sum (Imp)


-- https://leetcode.com/problems/k-concatenation-maximum-sum/
--


--
class Solution:
    def kConcatenationMaxSum1(self, arr: List[int], k: int) -> int:
        MOD = 10**9 + 7

        def kadane(nums):
            max_sum = curr_sum = 0  # Allow empty subarray
            for num in nums:
                curr_sum = max(num, curr_sum + num)
                max_sum = max(max_sum, curr_sum)
            return max_sum
        
        max_kadane = kadane(arr)  # Maximum subarray sum for one array
        if k == 1:
            return max_kadane % MOD
        
        prefix_sum = suffix_sum = total_sum = 0
        curr_prefix = curr_suffix = 0

        # Calculate prefix sum
        for num in arr:
            curr_prefix += num
            prefix_sum = max(prefix_sum, curr_prefix)

        # Calculate suffix sum
        for num in reversed(arr):
            curr_suffix += num
            suffix_sum = max(suffix_sum, curr_suffix)

        # Calculate total sum
        total_sum = sum(arr)

        # If total sum is positive, consider adding (k-2) times the total sum
        if total_sum > 0:
            result = max(prefix_sum + suffix_sum + (k-2) * total_sum, max_kadane)
        else:
            result = max(prefix_sum + suffix_sum, max_kadane)
        
        return result % MOD

    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:
        MOD=10**9+7
        def kadane(arr):
            curr=res=0
            for i in range(len(arr)):
                if curr<0:
                    curr=0
                curr+=arr[i]
                if curr>res:
                    res=curr
            return res

        res=0
        if sum(arr)>=0:
            if k>=2:
                temp=kadane(arr*2)
                res=temp+(k-2)*(sum(arr))
            else:
                res=kadane(arr)
        else:
            if k>=2:
                res=kadane(arr*2)
            else:
                res=kadane(arr)

        return res%MOD
--


====================================================================================================


-- Count vowels permutation


--
-- https://leetcode.com/problems/count-vowels-permutation/


--
class Solution:
    def countVowelPermutation(self, n: int) -> int:
        MOD = 10**9 + 7

        # Representing 'a', 'e', 'i', 'o', 'u' as indexes 0, 1, 2, 3, 4
        a, e, i, o, u = 1, 1, 1, 1, 1  # Base case for n = 1

        for _ in range(n - 1):
            a_new = (e) % MOD
            e_new = (a + i) % MOD
            i_new = (a + e + o + u) % MOD
            o_new = (i + u) % MOD
            u_new = (a) % MOD

            a, e, i, o, u = a_new, e_new, i_new, o_new, u_new

        return (a + e + i + o + u) % MOD
        

class Solution:
    def countVowelPermutation(self, n: int) -> int:
        m = 5
        dp = [[1] * 5 for _ in range(n)]

        for i in range(n - 2, -1, -1):
            for letter in range(5):
                # a
                if letter == 0:
                    dp[i][letter] = dp[i + 1][1] # 'a' follwed by 'e'
                ## e
                elif letter == 1:
                    dp[i][letter] = dp[i + 1][0] + dp[i + 1][2] # 'e' followed by 'a' or 'i' 
                ## i
                elif letter == 2:
                    dp[i][letter] = dp[i + 1][0] + dp[i + 1][1] + dp[i + 1][3] + dp[i + 1][4] # 'i' not followed by 'i'
                ## o
                elif letter == 3:
                    dp[i][letter] = dp[i + 1][2] + dp[i + 1][4] # 'o' followed by 'i' or 'u' 
                ## u
                else:
                    dp[i][letter] = dp[i + 1][0] # 'u' followed by 'a'

            dp[i][letter] = dp[i][letter] % (10**9 + 7)#
        
        return sum(dp[0]) % (10**9 + 7)
--


========================================================================================================

-- Queens that can attack the king


--
-- https://leetcode.com/problems/queens-that-can-attack-the-king/


--
class Solution:
    def queensAttacktheKing(self, queens: List[List[int]], king: List[int]) -> List[List[int]]:
        queen_set = {(x, y) for x, y in queens}  # Convert to set for O(1) lookup
        xK, yK = king
        
        # Possible directions (dx, dy)
        directions = [
            (0, 1), (0, -1),  # Left, Right
            (1, 0), (-1, 0),  # Down, Up
            (1, 1), (-1, -1),  # Bottom-right, Top-left diagonal
            (1, -1), (-1, 1)   # Bottom-left, Top-right diagonal
        ]
        
        result = []
        
        # Check each direction
        for dx, dy in directions:
            x, y = xK, yK
            while 0 <= x < 8 and 0 <= y < 8:  # Stay within board limits
                x += dx
                y += dy
                if (x, y) in queen_set:
                    result.append([x, y])
                    break  # Stop at the first queen in this direction
        
        return result
        
--


========================================================================================================

-- Tiling a rectangle witht the fewest squares


--
-- https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/


--
class Solution:
    def tilingRectangle(self, n: int, m: int) -> int:
        # 11x13 appears to be the only case where there is a square in the middle
        if max(m, n) == 13 and min(m, n) == 11:
            return 6

        # assume that there exists a horizontal or vertical cut
        @cache
        def deeper(a, b):
            # already a square
            if a == b:
                return 1

            # a single row / column
            if min(a, b) == 1:
                return max(a, b)

            # ensure a >= b
            if a < b:
                return deeper(b, a)

            best = +inf
            # try all horizontal and vertical cuts
            for i in range(1, a):
                best = min(best, deeper(i, b) + deeper(a - i, b))
            for i in range(1, b):
                best = min(best, deeper(a, i) + deeper(a, b - i))
            return best

        return deeper(m, n)
--


====================================================================================================