

check for Pallindrome

-- 
--

--
import (
    "fmt"
    "strconv"
)

func isPalindrome(x int) bool {
    str := strconv.Itoa(x)

    for i:= 0; i < len(str) / 2; i++ {
        if str[i] != str[len(str)-i-1] {
			return false
		}
    }

    return true
}

--


========================================================================================================

-- Convert 1d array to 2d


-- https://leetcode.com/problems/convert-1d-array-into-2d-array/?envType=daily-question&envId=2024-09-01
--


--
class Solution:
    def construct2DArray(self, arr: List[int], m: int, n: int) -> List[List[int]]:
        if m * n != len(arr):
            return []

        res = []
        index = 0

        for i in range(m):
            col = []
            for j in range(n):
                col.append(arr[index])
                index += 1
            res.append(col)
        return res     
--


=================================================================================================================


-- Symmetric binary tree


-- https://leetcode.com/problems/symmetric-tree/submissions/1376558768/
--


--
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        
        def dfs(left, right):
            if not left and not right:
                return True

            if not left or not right:
                return False
            
            if left.val != right.val:
                return False
            
            return dfs(left.left, right.right) and dfs(left.right, right.left)
        
        return dfs(root.left, root.right)
--

-- Go code

--
func dfs(left *TreeNode, right *TreeNode) bool {
    if left == nil && right == nil {
        return true
    }

    if left == nil || right == nil {
        return false
    }

    if left.Val != right.Val {
        return false
    }

    return dfs(left.Left, right.Right) && dfs(left.Right, right.Left)
}
func isSymmetric(root *TreeNode) bool {
    return dfs(root.Left, root.Right)
}
--


==========================================================================================================================

-- Maximum depth of the binary tree


--
-- https://leetcode.com/problems/maximum-depth-of-binary-tree/

--
func dfs(node *TreeNode) int {
    if node == nil {
        return 0
    }

    left := dfs(node.Left)
    right := dfs(node.Right)

    return max(left, right) + 1
}

func maxDepth(root *TreeNode) int {

    return dfs(root)
}
--

==========================================================================================================================

-- Longest common prefix 


-- https://leetcode.com/problems/longest-common-prefix/submissions/1379023169/
--


--
func longestCommonPrefix(strs []string) string {

    res := ""

    for i := 0; i < len(strs[0]); i++ {
        for j := 1; j < len(strs); j++ {
            if i >= len(strs[j]) || strs[0][i] != strs[j][i] {
                return res
            }
        } 
        res += string(strs[0][i])
    }

    return res

}
--


===================================================================================================================================


-- Climbing stairs


-- https://leetcode.com/problems/climbing-stairs/
--


-
func climbStairs(n int) int {
    if n == 1 {
        return 1
    }

    dp := make([]int, n + 1)
    dp[0] = 1
    dp[1] = 1

    for i := 2; i < n + 1; i++ {
        dp[i] = dp[i-1] + dp[i-2]
    }

    return dp[n]
}
-


============================================================================================================================================

-- Happy Number


-- https://leetcode.com/problems/happy-number/
--

-- The concept is the non happy number will always be repeated after words

--
func sqaure(n int) int {
    sqaure := 0

    for n != 0 {
        temp := n % 10
        sqaure += temp * temp
        n /= 10
    }

    return sqaure
}

func isHappy(n int) bool {
    slow := n
    fast := n


    for  {
        slow = sqaure(slow)
        fast = sqaure(sqaure(fast))

        if slow == fast {
            break
        }
    }

    return slow == 1
}
--


===================================================================================================

-- Clear digits


-- https://leetcode.com/problems/clear-digits/submissions/1380780060/
--


--

// IsDigit checks if a character is a digit.
func IsDigit(a rune) bool {
	return unicode.IsDigit(a)
}

// clearDigits removes digits and the adjacent character from the string.
func clearDigits(s string) string {
	runes := []rune(s) // Convert the string to a slice of runes to handle Unicode characters
	for i := 0; i < len(runes); i++ {
		if IsDigit(runes[i]) {
			if i != 0 {
				// Remove the character before the digit and the digit itself
				runes = append(runes[:i-1], runes[i+1:]...)
				i -= 2 // Adjust the index to handle the new length
			} else {
				// Remove the first character and the digit
				runes = runes[2:]
				i-- // Adjust the index
			}
		}
	}
	return string(runes)
}
--

==========================================================================================================


-- Find the child who has the ball after k seconds


-- https://leetcode.com/problems/find-the-child-who-has-the-ball-after-k-seconds/submissions/1380793962/
--


--
func numberOfChild(n int, k int) int {
    p := 0
    i := 0

    for k != 0 {
        if i == 0 {
            p = 1
        }
        if i == n - 1 {
            p = -1
        }

        i += p
        k -= 1
    }
    return i
}
--


=========================================================================================================

-- Count the pairs that form a complete day


-- https://leetcode.com/problems/count-pairs-that-form-a-complete-day-i/
--


--
func countCompleteDayPairs(hours []int) int{
	// Create a map to store the frequency of remainders
	remainderFreq := make(map[int]int)
	pairs := 0

	for _, hour := range hours {
		// Find the remainder when divided by 24
		rem := hour % 24
		
		// Calculate the complement remainder
		complement := (24 - rem) % 24
		
		// If the complement remainder exists in the map, it means we found a valid pair
		if count, exists := remainderFreq[complement]; exists {
			pairs += count
		}
		
		// Increment the frequency of the current remainder
		remainderFreq[rem]++
	}

	return pairs
}
--


================================================================================================================

-- Minimum time visiting all points


-- https://leetcode.com/problems/minimum-time-visiting-all-points/
--


--
import (
	"fmt"
	"math"
)

func minTimeToVisitAllPoints(points [][]int) int {
	time := 0

	for i := 1; i < len(points); i++ {
		prev := points[i-1]
		curr := points[i]

		// Calculate the absolute difference between x and y coordinates
		first := math.Abs(float64(prev[0] - curr[0]))
		second := math.Abs(float64(prev[1] - curr[1]))

		// Add the maximum of the two differences to the time
		time += int(math.Max(first, second))
	}

	return time
}


--

===============================================================================================================


-- Shft 2d grid


-- https://leetcode.com/problems/shift-2d-grid/
--


--
func shiftGrid(grid [][]int, k int) [][]int {
    m, n := len(grid), len(grid[0])
    totalElements := m * n
    k = k % totalElements // Reduce unnecessary full rotations

    // Flatten the 2D grid into a 1D array
    flat := make([]int, totalElements)
    idx := 0
    for _, row := range grid {
        for _, val := range row {
            flat[idx] = val
            idx++
        }
    }

    // Shift the flat array
    shifted := make([]int, totalElements)
    for i, val := range flat {
        shifted[(i+k)%totalElements] = val
    }

    // Convert the shifted 1D array back into a 2D grid
    result := make([][]int, m)
    for i := range result {
        result[i] = make([]int, n)
        for j := range result[i] {
            result[i][j] = shifted[i*n+j]
        }
    }

    return result
}
--

===================================================================================================

-- Cells with odd values in a matrix


-- https://leetcode.com/problems/cells-with-odd-values-in-a-matrix/submissions/1381645907/
--


--
func oddCells(m int, n int, indices [][]int) int {
    // Create a 2D slice with size m x n
    res := make([][]int, m)
    for i := range res {
        res[i] = make([]int, n)
    }

    // Apply the operations for each index pair in indices
    for _, el := range indices {
        r := el[0]
        c := el[1]

        // Increment all elements in the r-th row
        for i := 0; i < n; i++ {
            res[r][i] += 1
        }

        // Increment all elements in the c-th column
        for j := 0; j < m; j++ {
            res[j][c] += 1
        }
    }

    cnt := 0
    // Count the number of odd cells
    for _, row := range res {
        for _, el := range row {
            if el%2 == 1 {
                cnt++
            }
        }
    }

    return cnt
}

--


========================================================================================================


-- Check if it is a straight line 


-- https://leetcode.com/problems/check-if-it-is-a-straight-line/
--


--
func checkStraightLine(coordinates [][]int) bool {
    x1 := coordinates[0][0]
    x2 := coordinates[1][0]
    y1 := coordinates[0][1]
    y2 := coordinates[1][1]

    for i:= 2; i < len(coordinates); i++ {
        x := coordinates[i][0]
        y := coordinates[i][1]

        if (x - x2)*(y - y1) != (y - y2)*(x - x1) {
            return false
        }
    }
    return true

}
--

======================================================================================================

-- Subtract the product and sum of the digits of an integer


-- https://leetcode.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/submissions/1381753084/
--


--
func subtractProductAndSum(n int) int {
    product := 1
    sumarry := 0

    for n != 0 {
        temp := n % 10
        
        product *= temp

        sumarry += temp
        n /= 10
    }
    return product - sumarry
}
--


========================================================================================================


-- Element appearing more than 25 in sorted array


-- https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array/
--


--
func findSpecialInteger(arr []int) int {
    n := len(arr)
    if n == 0 {
        return -1 // Handle the case when the array is empty
    }

    m := make(map[int]int)
    maximumElement := 0
    maxCount := 0

    for _, val := range arr {
        m[val]++
        if m[val] > maxCount {
            maxCount = m[val]
            maximumElement = val
        }
    }

    if maxCount > n/4 {
        return maximumElement
    }

    return -1 // Return -1 if no element appears more than 25% of the time
}
--

=========================================================================================================


-- Convert the binary number in a linked list to a integer


-- https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/
--

--
/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */

func binarytodecimal(binary string) int {
    decimal := 0
    n := len(binary)
    for i:= 0; i < n; i++ {
        // Convert the current binary character to an integer (0 or 1)
        bit, _ := strconv.Atoi(string(binary[i]))
        
        // Calculate the base-10 equivalent
        decimal += bit * (1 << (n - i - 1))  // 1 << n is equivalent to 2 ** n

    } 
    return decimal
}


func getDecimalValue(head *ListNode) int {
    str := ""
    for head != nil {
        str += strconv.Itoa(head.Val)
        head = head.Next
    }
    return binarytodecimal(str)
}
--

=======================================================================================================


-- Find the numbers with even number of digits


--
-- https://leetcode.com/problems/find-numbers-with-even-number-of-digits/description/


--
func findNumbers(nums []int) int {
    cnt := 0

    for _, val := range nums {
        if len(strconv.Itoa(val)) % 2 == 0 {
            cnt += 1
        }
    }

    return cnt
}
--


===========================================================================================================

-- Replace elements with greatest element on the right side


-- https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/
--


--
func replaceElements(arr []int) []int {
    // Initialize stack with -1, which acts as the greatest element for the last position
    stack := []int{-1}
    n := len(arr)
    res := make([]int, n)

    // Iterate over the array from right to left
    for i := n - 1; i >= 0; i-- {
        // The top of the stack is always the greatest element to the right
        res[i] = stack[len(stack)-1]

        // If the current element is greater than the stack's top, update the stack
        if arr[i] > stack[len(stack)-1] {
            stack = append(stack, arr[i])
        }
    }

    return res
}
--

=======================================================================================================

-- Find the n unique sum up to zero


--
-- https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/


--
func sumZero(n int) []int {
    ans := []int{}  // Initialize the slice

    mid := n / 2
    fmt.Println(mid)
    for i := 0; i < n/ 2; i++ {
        ans = append(ans, mid)
        ans = append(ans, -mid)
        mid -= 1
    }

    if n % 2 == 1 {  // Check if n is odd
        ans = append(ans, 0)
    }
    all_zero := true

    for _, val := range ans {
        if val != 0 {
            all_zero = false
        }
    }
    zeroSlice := []int{0}

    if all_zero {
        return zeroSlice
    }

    return ans
}

--


========================================================================================================

-- Decrypt string from alphavet to integer mapping


-- https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping/submissions/1382026983/
--

--
package main

import (
	"fmt"
	"strconv"
)

func freqAlphabets(s string) string {
	res := []byte{}
	n := len(s)
	i := 0

	for i < n {
		if i+2 < n && s[i+2] == '#' {
			// Convert the substring s[i:i+2] to an integer
			temp, _ := strconv.Atoi(s[i : i+2])
			// Append the corresponding alphabet character
			res = append(res, byte(temp+96))
			i += 3
		} else {
			// Convert the single character s[i] to an integer
			temp, _ := strconv.Atoi(string(s[i]))
			// Append the corresponding alphabet character
			res = append(res, byte(temp+96))
			i++
		}
	}

	return string(res)
}
--


--
class Solution(object):
    def freqAlphabets(self, s):
        """
        :type s: str
        :rtype: str
        """

        res = []
        n = len(s)
        i = 0
        while i < n:
            if i + 2 < n and s[i + 2] == "#":
                temp = int(s[i: i+2])

                res.append(chr(temp + 96))
                i += 3
            else:
                temp = int(s[i])
                res.append(chr(temp + 96))
                i += 1

        return "".join(res)        
--

========================================================================================================

-- Decompress run length encoded list

--
-- https://leetcode.com/problems/decompress-run-length-encoded-list/

--
func decompressRLElist(nums []int) []int {
    n := len(nums)

    res := [] int{}

    for i:= 1; i < n; i+=2 {
        count := nums[i - 1]
        num := nums[i]
        for c:= 0; c < count; c++ {
            res = append(res, num)
        }
    }
    return res
}
--


==============================================================================================================

-- INteger to the sum of two no zero intergers



-- https://leetcode.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers/
--


--
func containsZero(num int) bool {
        for num > 0 {
            if num%10 == 0 {
                return true
            }
            num /= 10
        }
        return false
    }

func getNoZeroIntegers(n int) []int {
    // if n <= 1 {
    //     return 
    // }

    if n <= 1 {
        return []int{-1, -1} // Returning a slice instead of -1
    }

    temp := n / 2
    temp2 := n - temp

    for containsZero(temp) || containsZero(temp2) {
        temp--
        temp2++
    }

    res := [] int {temp, temp2}
    return res
}
--


==============================================================================================================

-- Maximum 69 number 


-- https://leetcode.com/problems/maximum-69-number/
--

--
import (
    "strconv"
    "fmt"
)

func maximum69Number (num int) int {
    res := ""
    numConv := strconv.Itoa(num)
    once := true
    
    for _, val := range numConv {
        if val == '6' && once {
            once = false
            res += "9"
        } else {
            res += string(val)
        }
    }

    result, err := strconv.Atoi(res)

    if err != nil {
        
    }

    return result
}
--


===============================================================================================================


-- Find the winner on a tic tac toe game


--
-- https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game/


--
class Solution:
    def tictactoe(self, moves: List[List[int]]) -> str:
        A=[0]*8
        B=[0]*8
        for i in range(len(moves)):
            r,c=moves[i]
            player = A if i%2==0 else B
            player[r] += 1
            player[c+3] += 1
            if r==c:
                player[6] += 1
            if r==2-c:
                player[7] += 1
        for i in range(8):
            if A[i]==3:
                return "A"
            if B[i]==3:
                return "B"
        
        return "Draw" if len(moves) == 9 else "Pending"
        
--



====================================================================================================================

-- Rank the transform of an array


-- https://leetcode.com/problems/rank-transform-of-an-array/
--


--
class Solution:
    def arrayRankTransform(self, arr: List[int]) -> List[int]:
        sorted_unique = sorted(set(arr))
        
        # Create a dictionary to map each element to its rank
        rank_map = {num: i + 1 for i, num in enumerate(sorted_unique)}
        
        # Replace each element with its corresponding rank
        return [rank_map[num] for num in arr]
--

=====================================================================================================================


-- Count the negative numbers in a sorted matrix


-- https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/
--


--
class Solution:
    def countNegatives1(self, grid: List[List[int]]) -> int:
        r = len(grid)
        c = len(grid[0])
        cnt = 0

        for i in range(r):
            for j in range(c - 1, -1, -1):
                if grid[i][j] >= 0:
                    break
                cnt += 1

        return cnt

    def countNegatives(self, grid: List[List[int]]) -> int:
        r = len(grid)
        c = len(grid[0])

        cnt = 0

        for i in range(r):
            low = 0
            high = c - 1

            while low <= high:
                mid = low + (high - low) // 2

                if grid[i][mid] < 0:
                    high = mid - 1
                else:
                    low = mid + 1

            cnt += c - low
        return cnt
--


=========================================================================================================================


-- Remove palindromic subsequence


-- https://leetcode.com/problems/remove-palindromic-subsequences/submissions/1383017119/
--

--
class Solution:
    def removePalindromeSub(self, s: str) -> int:
        if not s:
            return 0
        if s == s[::-1]:
            return 1
        else:
            return 2
--


==============================================================================================================================

-- The k weakest rows in a matrix


-- https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/submissions/1383026309/
--


--class Solution:
    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
        m = []

        for i in range(len(mat)):
            m.append([mat[i].count(1), i])
        
        m.sort()
        res = []
        for i in range(k):
            res.append(m[i][1])

        return res
--


===================================================================================================================

-- Check if n and its double exist

-- https://leetcode.com/problems/check-if-n-and-its-double-exist/submissions/1383028678/
--


--
class Solution:
    def checkIfExist(self, arr: List[int]) -> bool:
        m = {}

        for i in range(len(arr)):
            if m.get(arr[i] / 2) or m.get(arr[i] * 2):
                return True
            m[arr[i]] = 1

        return False
--


===========================================================================================================================

-- Valid mountain array 


-- https://leetcode.com/problems/valid-mountain-array/submissions/1383066368/
--


--
class Solution:
    def validMountainArray(self, arr: List[int]) -> bool:
        n = len(arr)
        if n <= 2:
            return False
        i = 1
        while i < n:
            if arr[i] <= arr[i - 1]:
                break
            i += 1
        i = i - 1
        
        if i == n - 1 or i == 0:
            return False

        while i + 1 < n:
            if arr[i] <= arr[i + 1]:
                return False
            i += 1
        
        return True
        
--


===========================================================================================================================

-- Univalued binary tree


-- https://leetcode.com/problems/univalued-binary-tree/
--


--
class Solution:
    def isUnivalTree(self, root: Optional[TreeNode]) -> bool:
        value = root.val

        head = root

        def dfs(node, value):
            if not node:
                return True

            if node.val != value:
                return False

            left = dfs(node.left, value)
            right = dfs(node.right, value)

            return left and right

        return dfs(head, value)
--


=======================================================================================================================


-- Squares if a sorted array 


-- https://leetcode.com/problems/squares-of-a-sorted-array/
--


--
class Solution:
    def sortedSquares1(self, nums: List[int]) -> List[int]:
        peak_index = float("inf")

        if len(nums) == 1:
            return [nums[0] * nums[0]]

        for index, val in enumerate(nums):
            if val >= 0:
                peak_index = index
                break
        
        n = len(nums)

        left_arr = []

        if peak_index == float("inf"):
            peak_index = n

        for i in range(peak_index - 1, -1 , -1):
            left_arr.append(nums[i] * nums[i])

        if peak_index >= n:
            return left_arr

        res = []
        p = 0
        j = 0

        while j < n:
            t = nums[peak_index]

            if p < len(left_arr) and left_arr[p] < (t * t):
                res.append(left_arr[p])
                p += 1

            else:
                res.append(t * t)
                peak_index = (peak_index + 1) % n

            j += 1

        return res


    def sortedSquares(self, nums: List[int]) -> List[int]:
        res = [0] * len(nums)
        left = 0
        right = len(nums) - 1

        for i in range(len(nums) - 1, -1, -1):
            if abs(nums[left]) > abs(nums[right]):
                res[i] = nums[left] ** 2
                left += 1
            else:
                res[i] = nums[right] ** 2
                right -= 1
        
        return res


        

        
--


==============================================================================================================


-- Cousins in the binary tree

 
-- https://leetcode.com/problems/cousins-in-binary-tree/
--


--
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:
        q = [root]

        while q:
            s = len(q)
            foundx = False
            foundy = False
            for i in range(s):
                temp = q.pop(0)

                if temp.val == x:
                    foundx = True
                if temp.val == y:
                    foundy = True

                if temp.left:
                    q.append(temp.left)
                if temp.right:
                    q.append(temp.right)

            if foundx and foundy:
                return True
        
        return False
--


===============================================================================================================

-- Add to Array form of integer


-- https://leetcode.com/problems/add-to-array-form-of-integer/
--


--
class Solution:
    def addToArrayForm(self, num: List[int], k: int) -> List[int]:
        k_arr = []

        while k:
            k_arr.append(k % 10)
            k = k // 10
        
        k_arr = k_arr[::-1]

        i = len(num) - 1
        j = len(k_arr) - 1
        carry = 0
        res = []

        while i >= 0 and j >= 0:
            temp = (num[i] + k_arr[j] + carry) % 10
            carry = (num[i] + k_arr[j] + carry) // 10

            res.append(temp)

            i -= 1
            j -= 1
        
        while i >= 0:
            temp = (num[i] + carry) % 10
            carry = (num[i] + carry) // 10
            res.append(temp)
            i -= 1

        while j >= 0:
            temp = (k_arr[j] + carry) % 10
            carry = (k_arr[j] + carry) // 10
            res.append(temp)
            j -= 1

        if carry:
            res.append(carry)

        return res[::-1]
--


================================================================================================

-- Find common characters


-- https://leetcode.com/problems/find-common-characters/
--


--
from typing import List

class Solution:
    def commonChars1(self, words: List[str]) -> List[str]:
        n = len(words)

        # Create a frequency map for the first word
        hash_map = [0] * 26
        for c in words[0]:
            hash_map[ord(c) - ord('a')] += 1

        # Compare the frequency map with the rest of the words
        for i in range(1, n):
            hash_map2 = [0] * 26
            for c in words[i]:
                hash_map2[ord(c) - ord('a')] += 1

            # Keep the minimum frequency of each character
            for j in range(26):
                hash_map[j] = min(hash_map[j], hash_map2[j])

        result = []
        # Collect the common characters
        for i in range(26):
            while hash_map[i] > 0:
                result.append(chr(i + ord('a')))
                hash_map[i] -= 1

        return result


    def commonChars(self, words: List[str]) -> List[str]:

        m = [0] * 26

        for i in range(len(words[0])):
            m[ord(words[0][i]) - ord('a')] += 1
        

        for i in range(1, len(words)):
            m2 = [0] * 26

            for ch in words[i]:
                m2[ord(ch) - ord('a')] += 1
            
            for j in range(26):
                m[j] = min(m[j], m2[j])
        
        res = []
        for i in range(26):
            char = chr(i + ord('a'))
            j = m[i]
            while j:
                res.append(char)
                j -= 1
        return res



--


=========================================================================================================


-- Maximize sum of array after k negations


-- https://leetcode.com/problems/maximize-sum-of-array-after-k-negations/
--


--
class Solution:
    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:
        nums.sort()
        for i in range(len(nums)):
            if k > 0 and nums[i] < 0:
                nums[i] = -nums[i]
                k -= 1
        
        # If there are leftover k negations

        # if k is still there check for even or odd

        # if even, if you flip the number even times it same
        # else flip the smallest number in the array
        if k % 2 != 0:
            # Sort again and flip the smallest element
            nums.sort()
            nums[0] = -nums[0]
        
        return sum(nums)
--

==================================================================================================

-- Check if it is a Straight line


-- https://leetcode.com/problems/check-if-it-is-a-straight-line/
--


--
class Solution:
    def checkStraightLine(self, c: List[List[int]]) -> bool:

        x1 = c[0][0]
        y1 = c[0][1]

        x2 = c[1][0]
        y2 = c[1][1]

        for i in range(2, len(c)):
            x = c[i][0]
            y = c[i][1]

            if (x - x1)*(y - y2) != (x - x2)*(y - y1):
                return False
        return True


        
--


========================================================================================================


-- Special positions in a binary matirx


-- https://leetcode.com/problems/special-positions-in-a-binary-matrix/
--


--
class Solution:
    def numSpecial(self, mat: List[List[int]]) -> int:

        n = len(mat)
        m = len(mat[0])
        row_sum = [sum(row) for row in mat]
        col_sum = [sum(mat[i][j] for i in range(n)) for j in range(m)]
        matbox = 0
        for i in range(n):
            for j in range(m):
                if mat[i][j] == 1 and row_sum[i] == 1 and col_sum[j] == 1:
                    matbox += 1

        return matbox
--


=========================================================================================================

-- Replace all s to avoid consecutive repeating characters


--
-- https://leetcode.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/


--
class Solution:
    def modifyString(self, s: str) -> str:

        b = [0] * 26

        for i, val in enumerate(s):
            if val != '?':
                b[ord(val) - ord('a')]

                

        for i in range(n):
            if s[i] == "?":
                for j in range(26):
                    char = chr(j + ord('a'))  # Generate a character from 'a' to 'z'
                    # Check if this character can be placed without matching neighbors
                    if (i == 0 or res[i - 1] != char) and (i == n - 1 or res[i + 1] != char):
                        res[i] = char
                        break
            else:
                res[i] = s[i]

        return ''.join(res)
                    
        
--


=============================================================================================================


-- Detect pattern of length m repeated k or more time


-- https://leetcode.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/
--


--
class Solution:
    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:
        cnt = 0
        i = 0
        while i <= len(arr) - 2 * m:
            if arr[i:i + m] == arr[i + m:i + m + m]:
                cnt += 1
                i += m 
                if cnt == k - 1:
                    return True
            else:
                cnt = 0
                i += 1 
        return False
--


========================================================================================================


-- Thousand separator


--
-- https://leetcode.com/problems/thousand-separator/


--
class Solution:
    def thousandSeparator(self, n: int) -> str:
        li = list(str(n))[::-1]
        final = []
        
        for i in range(0, len(li), 3):
            final.append("".join(li[i:i+3]))
            if i + 3 < len(li):
                final.append(".")
        
        return "".join(final)[::-1]
--

============================================================================================

-- Make the string great


-- https://leetcode.com/problems/make-the-string-great/
--


--
class Solution:
    def makeGood(self, s: str) -> str:

        stack = []
        for char in s:
            if stack and abs(ord(stack[-1]) - ord(char)) == 32:
                stack.pop()
            else:
                stack.append(char)
        
        return ''.join(stack)


        
--


=======================================================================================================

-- Three consecutive odds


-- https://leetcode.com/problems/three-consecutive-odds/submissions/1385745683/
--

--
class Solution:
    def threeConsecutiveOdds(self, arr: List[int]) -> bool:

        count = 0
        for num in arr:
            if num % 2 == 1:
                count += 1
                if count == 3:
                    return True
            else:
                count = 0
        return False
--


==========================================================================================================


-- Find all duplicates in an array



-- https://leetcode.com/problems/find-all-duplicates-in-an-array/
--


--
class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        res = []

        for i in range(len(nums)):
            index = abs(nums[i]) - 1

            if nums[index] < 0:
                res.append(index + 1)
            else:
                nums[index] *= -1
        return res
--


=======================================================================================================

-- Reverse String


--
--

--
class Solution:
    def reverseString(self, s: List[str]) -> None:
        """
        Do not return anything, modify s in-place instead.
        """
        i = 0
        j = len(s) - 1
        while i < j:
            s[i], s[j] = s[j], s[i]
            i += 1
            j -= 1
        return sg
--


====================================================================================================


-- Count the number of vowel string in range


-- https://leetcode.com/problems/count-the-number-of-vowel-strings-in-range/
--


--
class Solution:
    def vowelStrings(self, words: List[str], left: int, right: int) -> int:
        cnt = 0
        vowel = "aeiou"

        for i, word in enumerate(words):
            if word[0] in vowel and word[-1] in vowel and i >= left and i <= right:
                cnt += 1
        
        return cnt

--



================================================================================================


-- Pass the pillows


--
-- https://leetcode.com/problems/pass-the-pillow/submissions/1422390922/


--
class Solution:
    def passThePillow(self, n: int, time: int) -> int:
        
        # we can divide the chunks into n - 1 partitions 
        # the odd th postion starts from 1 and eventh position from n

        chunk = time // (n - 1)

        if chunk % 2 == 0:
            # start from n 

            return (time % (n - 1) + 1)
        else:
            return n - time % (n - 1)
--


===============================================================================================


-- Split with minimum sum


-- https://leetcode.com/problems/split-with-minimum-sum/
--


--
class Solution:
    def splitNum(self, num: int) -> int:
        # Convert the number to a sorted list of characters (digits)
        num_str = sorted(str(num))
        
        num1 = ""
        num2 = ""

        # Alternate between two numbers
        for i in range(len(num_str)):
            if i % 2 == 0:
                num1 += num_str[i]
            else:
                num2 += num_str[i]
        
        # Convert num1 and num2 to integers and return their sum
        return int(num1) + int(num2)

--

===================================================================================================


-- Find the maximum number of marked indices


-- https://leetcode.com/problems/find-the-maximum-number-of-marked-indices/submissions/1422443885/
--


--
class Solution:
    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:
        nums.sort()

        n = len(nums)

        mid = n // 2
        i = 0
        j = mid
        cnt = 0
        
        while i < mid and j < n:
            if 2* nums[i] <= nums[j]:
                cnt += 2
                i += 1
                j += 1
            else:
                j += 1

        return cnt
--


===================================================================================================

-- Left and right sum diff


--
-- https://leetcode.com/problems/left-and-right-sum-differences/submissions/1422761190/


--
class Solution:
    def leftRightDifference(self, nums: List[int]) -> List[int]:
        prefix_sum = [0] * (len(nums) + 1)

        n = len(prefix_sum)
        i = 1
        while i < n:
            prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]
            i += 1

        res = []

        for i in range(1, n):
            res.append(abs(prefix_sum[i - 1] - (prefix_sum[-1] - prefix_sum[i])))

        return res


        
--

=====================================================================================================


-- Merge two 2d arrays by summing values


-- https://leetcode.com/problems/merge-two-2d-arrays-by-summing-values/
--


--
from collections import defaultdict
class Solution:
    def mergeArrays1(self, num1: List[List[int]], num2: List[List[int]]) -> List[List[int]]:
        d = defaultdict(int)

        for i in num1:
            d[i[0]] += i[1]
        for j in num2:
            d[j[0]] += j[1]

        sorted_keys = sorted(d.keys())

        res = []
        for i in sorted_keys:
            res.append([i, d[i]])

        return res

    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        i, j = 0, 0
        result = []
        
        while i < len(nums1) and j < len(nums2):
            if nums1[i][0] == nums2[j][0]:  # ids match
                result.append([nums1[i][0], nums1[i][1] + nums2[j][1]])
                i += 1
                j += 1
            elif nums1[i][0] < nums2[j][0]:  # id in nums1 is smaller
                result.append([nums1[i][0], nums1[i][1]])
                i += 1
            else:  # id in nums2 is smaller
                result.append([nums2[j][0], nums2[j][1]])
                j += 1

        # Append the remaining elements from nums1 or nums2
        while i < len(nums1):
            result.append([nums1[i][0], nums1[i][1]])
            i += 1
        while j < len(nums2):
            result.append([nums2[j][0], nums2[j][1]])
            j += 1

        return result


--


=====================================================================================================


-- Maximum diff by remapping a digit


-- https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/
--


--
class Solution:
    def minMaxDifference(self, num: int) -> int:
        num_str = str(num)

        # Generate maximum number
        max_num = num_str
        for i in range(len(num_str)):
            if num_str[i] != '9':
                max_num = num_str.replace(num_str[i], '9')
                break  # Stop after the first replacement

        # Generate minimum number
        min_num = num_str
        if num_str[0] != '0':
            min_num = num_str.replace(num_str[0], '0') 
        else:
            for i in range(1, len(num_str)):
                if num_str[i] != '0':
                    min_num = num_str.replace(num_str[i], '0')
                    break  

        return int(max_num) - int(min_num)

# Example usage:
solution = Solution()
print(solution.minMaxDifference(1234))  # Output should be the difference

--


======================================================================================================

-- Take gifts from the richest pile


-- https://leetcode.com/problems/take-gifts-from-the-richest-pile/submissions/1426602784/
--


--
# import Math
class Solution:
    def pickGifts(self, gifts: List[int], k: int) -> int:

        max_heap = [-gift for gift in gifts]
        heapq.heapify(max_heap)
        
        for _ in range(k):
            max_gifts = -heapq.heappop(max_heap)
            
            remaining_gifts = math.floor(math.sqrt(max_gifts))
            
            heapq.heappush(max_heap, -remaining_gifts)
        
        total_remaining = -sum(max_heap)
        
        return total_remaining
--

==========================================================================================================

-- Count the collisions of monkeys on a polygon

-- https://leetcode.com/problems/count-collisions-of-monkeys-on-a-polygon/submissions/1426682906/
--


--
class Solution:
    def monkeyMove(self, n: int) -> int:
        # get the total number of moves the monkey and go
        MOD = 10**9 + 7
        total_ways = pow(2, n, MOD)

        # subtract 2 ways where in monkeys does not collide
        result = (total_ways - 2) % MOD
        
        return result
--


==========================================================================================================

-- Sort the students by their kth submissions


--
-- https://leetcode.com/problems/sort-the-students-by-their-kth-score/submissions/1426972693/


--
from typing import List

class Solution:
    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:
        # Sort the students based on the k-th score in descending order
        score.sort(key=lambda x: x[k], reverse=True)
        return score
--

===============================================================================================================


-- Maximum subsequence score


--
-- https://leetcode.com/problems/maximum-subsequence-score/


--
from heapq import heappush, heappop

class Solution:
    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:

        # zip the both elements in nums1 and nums2
        # sort the elements in decreasing order with respect num2
        pairs = sorted(zip(nums1, nums2), key=lambda x:-x[1])

        min_heap = []
        n = len(pairs)
        ans = 0
        csum = 0

        for i in range(n):
            num1 = pairs[i][0]
            num2 = pairs[i][1]

            heappush(min_heap, num1)
            csum += num1

            if len(min_heap) > k:
                csum -= heappop(min_heap)
            
            if len(min_heap) == k:
                ans = max(ans, csum * num2)
        
        return ans
            
--


===============================================================================================================


-- Minimum fuel cost to report to the capital


--
-- https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital/



--
from collections import defaultdict
import math
class Solution:
    def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:

        total = 0
        g = defaultdict(list)

        for u, v in roads:
            g[u].append(v)
            g[v].append(u)

        # representative 
        def dfs(node, par):
            nonlocal total

            representative = 1

            for neighbour in g[node]:
                if neighbour != par:
                    temp = dfs(neighbour, node)

                    total += math.ceil(temp/seats)
                    representative += temp

            return representative
        
        # send node and the parent
        dfs(0, -1)
        return total      

        
--


===============================================================================================================

-- Delete greatest value in each row


--
--


--
class Solution:
    def deleteGreatestValue(self, grid: List[List[int]]) -> int:
        return sum(max(c) for c in zip(*[sorted(r) for r in grid]))
        
--


=======================================================================================================











