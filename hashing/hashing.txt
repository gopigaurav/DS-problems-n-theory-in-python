# Function to display hashtable
def display_hash(hashTable):
	
	for i in range(len(hashTable)):
		print(i, end = " ")
		
		for j in hashTable[i]:
			print("-->", end = " ")
			print(j, end = " ")
			
		print()

# Creating Hashtable as
# a nested list.
HashTable = [[] for _ in range(10)]

# Hashing Function to return
# key for every value.
def Hashing(keyvalue):
	return keyvalue % len(HashTable)


# Insert Function to add
# values to the hash table
def insert(Hashtable, keyvalue, value):
	
	hash_key = Hashing(keyvalue)
	Hashtable[hash_key].append(value)

# Driver Code
insert(HashTable, 10, 'Allahabad')
insert(HashTable, 25, 'Mumbai')
insert(HashTable, 20, 'Mathura')
insert(HashTable, 9, 'Delhi')
insert(HashTable, 21, 'Punjab')
insert(HashTable, 21, 'Noida')

display_hash (HashTable)


output -- 

0 --> Allahabad --> Mathura 
1 --> Punjab --> Noida 
2 
3 
4 
5 --> Mumbai 
6 
7 
8 
9 --> Delhi 

================================== Linear Probing ===================================================

import numpy as np

# Linear probing program in python
class Hash_table() :
    
    def __init__(self,size) :
        self.size = size
        self.hashtable = np.array([None]*self.size)
        
    def hash(self,key) :
        
        # Hash function h(x) = x%10
        index = key%10 
        
        if self.hashtable[index] == None :
            return index
        else :
            
            # Implementing linear probing
            while self.hashtable[index] != None :
                index = (index+1)%10
                
            return index
        
    def insert(self,key) :
        
        index = self.hash(key)
        self.hashtable[index] = key
        
    def search(self,key) :
        
        index = key%10
        
        if self.hashtable[index] != key :
            while self.hashtable[index] != key and self.hashtable[index] != None :
                index = (index+1)%10
                
        if self.hashtable[index] == key :
            return index
        else :
            return None
    
    def print_hashtable(self) :
        
        print("Hash table is :-\n\nindex \t value")
        for x in range(len(self.hashtable)) :
            print(x,"\t",self.hashtable[x])

# Initializing hash table of size 10
HT = Hash_table(10)

# Inserting only 5 values to make Î» <= 0.5
HT.insert(10)
HT.insert(90)
HT.insert(25)
HT.insert(5)
HT.insert(35)

HT.print_hashtable()

index = HT.search(35)

if index!= None :
    print("\nGiven key is present at index",index)
else :
    print("\nGiven key is not present in the hash table")


================================= Separate chaining -- in normal order ===================================

import numpy as np

#separate chaining in python
class Node() :
    
    def __init__(self,value) :
        self.value = value
        self.next = None

class Linked_List() :
    
    def __init__(self) :
        self.head = None
        
    def insert(self,value) :
        if not self.head :
            self.head = Node(value)
        else :
            temp = self.head
            while temp.next :
                temp = temp.next
            temp.next = Node(value)
            
    def search(self,value) :
        temp = self.head
        while temp :
            if temp.value == value :
                return True
            temp = temp.next
        return False
    
    def print_LL(self) :
        temp = self.head
        if not temp :
            print(None)
        while temp :
            if temp.next :
                print(temp.value,"--->",end="  ")
            else :
                print(temp.value)
            temp = temp.next
            
            
class Hash_table() :
    def __init__(self,size) :
        self.size = size
        self.hashtable = np.array([None]*self.size)
        for x in range(self.size) :
            self.hashtable[x] = Linked_List()
        
    def hash(self,key) :
        # Hash function is h(x) = x%10
        return key%10
    
    def insert_key(self,key) :
        index = self.hash(key)
        self.hashtable[index].insert(key)
        
    def search_key(self,key) :
        index = self.hash(key)
        boolean = self.hashtable[index].search(key)
        return boolean
    
    def print_HT(self) :
        print("Hash table is :- \n")
        print("Index \t\tValues\n")
        for x in range(self.size) :
            print(x,end="\t\t")
            self.hashtable[x].print_LL()
    
HT = Hash_table(10)
HT.insert_key(10)
HT.insert_key(90)
HT.insert_key(25)
HT.insert_key(5)
HT.insert_key(35)
HT.insert_key(27)
HT.insert_key(17)
HT.insert_key(22)
if HT.search_key(17) :
    print("Given key is present\n")
else :
    print("Given key is not present\n")
HT.print_HT()

=============================================== Separate Chaining --- in Sorted Order ===================================

import numpy as np

#sorted separate chaining in python
class Node() :
    
    def __init__(self,value) :
        self.value = value
        self.next = None

class Linked_List() :
    
    def __init__(self) :
        self.head = None
        
    def sorted_insert(self,value) :
        if not self.head :
            self.head = Node(value)
        else :
            temp = self.head
            new_node = Node(value)
            if temp.value >= new_node.value :
                new_node.next = self.head
                self.head = new_node
            else :
                while temp != None and temp.value < new_node.value :
                    prev = temp
                    temp = temp.next
                new_node.next = temp
                prev.next = new_node
            
    def search(self,value) :
        temp = self.head
        while temp :
            if temp.value == value :
                return True
            temp = temp.next
        return False
    
    def print_LL(self) :
        temp = self.head
        if not temp :
            print(None)
        while temp :
            if temp.next :
                print(temp.value,"--->",end="  ")
            else :
                print(temp.value)
            temp = temp.next
            
            
class Hash_table() :
    def __init__(self,size) :
        self.size = size
        self.hashtable = np.array([None]*self.size)
        for x in range(self.size) :
            self.hashtable[x] = Linked_List()
        
    def hash(self,key) :
        # Hash function is h(x) = x%10
        return key%10
    
    def insert_key(self,key) :
        index = self.hash(key)
        self.hashtable[index].sorted_insert(key)
        
    def search_key(self,key) :
        index = self.hash(key)
        boolean = self.hashtable[index].search(key)
        return boolean
    
    def print_HT(self) :
        print("Hash table is :- \n")
        print("Index \t\tValues\n")
        for x in range(self.size) :
            print(x,end="\t\t")
            self.hashtable[x].print_LL()
    
HT = Hash_table(10)
HT.insert_key(10)
HT.insert_key(90)
HT.insert_key(25)
HT.insert_key(5)
HT.insert_key(35)
HT.insert_key(27)
HT.insert_key(17)
HT.insert_key(22)
if HT.search_key(17) :
    print("Given key is present\n")
else :
    print("Given key is not present\n")
HT.print_HT()


===================================== Longest common subsequence ================================================

# Python program to find longest contiguous subsequence
-- https://www.geeksforgeeks.org/longest-consecutive-subsequence/
-- https://practice.geeksforgeeks.org/problems/longest-consecutive-subsequence2449/1

-- method2

--
def findLongestConseqSubseq(self,arr, N):
        Longestcount = 0
        dic = {}
        for i in range(N):
            dic[arr[i]] = dic.get(arr[i], 0) + 1
        for i in range(N):
            if (arr[i]-1) not in dic:
                curNum = arr[i]
                count = 1
                while curNum+1 in dic:
                    curNum +=1
                    count += 1
                Longestcount = max(Longestcount, count)
                
        return Longestcount

--

def findLongestConseqSubseq(arr, n):

	s = set()
	ans = 0

	# Hash all the array elements
	for ele in arr:
		s.add(ele)

	# check each possible sequence from the start
	# then update optimal length
	for i in range(n):

		# if current element is the starting
		# element of a sequence
		if (arr[i]-1) not in s:

			# Then check for next elements in the
			# sequence
			j = arr[i]
			while(j in s):
				j += 1

			# update optimal length if this length
			# is more
			ans = max(ans, j-arr[i])
	return ans


# Driver code
if __name__ == '__main__':
	n = 7
	arr = [1, 9, 3, 10, 4, 20, 2]
	print ("Length of the Longest contiguous subsequence is ",findLongestConseqSubseq(arr, n))

# Contributed by: Harshit Sidhwa

0r === == = = =

# Python program to find longest contiguous subsequence


def findLongestConseqSubseq(arr, n):

	s = set()
	ans = 0
	cnt = 0

	# Hash all the array elements
	for ele in arr:
		s.add(ele)

	# check each possible sequence from the start
	# then update optimal length
	for i in range(n):

		# if current element is the starting
		# element of a sequence
		if (arr[i]-1) not in s:

			# Then check for next elements in the
			# sequence
			j = arr[i]
			print(j,"b")
			while(j in s):
				cnt += 1
				j+=1
				print(j,"in loop")
			# update optimal length if this length
			# is more
			print(cnt)
			ans = max(ans, cnt)
			cnt = 0
	return ans


# Driver code
if __name__ == '__main__':
	n = 7
	arr = [1, 9, 3, 10, 4, 20, 2]
	print ("Length of the Longest contiguous subsequence is ",findLongestConseqSubseq(arr, n))

# Contributed by: Harshit Sidhwa

=======================================================================================================

========================================== highest frequency char ===============================

string= "mississippis"
print(string)

char_freq={}

for i in string:
    if i in char_freq:
        char_freq[i]=char_freq[i]+1
    else:
        char_freq[i] = 1
result= max(char_freq, key = char_freq.get)

print("Most frequent character: ",result)
==========================================================================================================


-- find k numbers with most occurences in array

-- https://www.geeksforgeeks.org/find-k-numbers-occurrences-given-array/


--

# Python3 implementation to find k numbers
# with most occurrences in the given array

# function to print the k numbers with
# most occurrences


def pr_N_mostFrequentNumber(arr, n, k):

	um = {}
	for i in range(n):
		if arr[i] in um:
			um[arr[i]] += 1
		else:
			um[arr[i]] = 1
	a = [0] * (len(um))
	j = 0
	for i in um:
		a[j] = [i, um[i]]
		j += 1
	a = sorted(a, key=lambda x: x[0],
			reverse=True)
	a = sorted(a, key=lambda x: x[1],
			reverse=True)

	# display the top k numbers
	print(k, "numbers with most occurrences are:")
	for i in range(k):
		print(a[i][0], end=" ")


# Driver code
if __name__ == "__main__":
	arr = [3, 1, 4, 4, 5, 2, 6, 1]
	n = 8
	k = 2
	pr_N_mostFrequentNumber(arr, n, k)

# This code is contributed by
# Shubham Singh(SHUBHAMSINGH10)

--


====================================================================================================================================


-- find union and intersection of unsorted array

-- https://www.geeksforgeeks.org/find-union-and-intersection-of-two-unsorted-arrays/


--
# Python program to find union and intersection
# using sets


def printUnion(arr1, arr2, n1, n2):
	hs = set()

	# Insert the elements of arr1[] to set hs
	for i in range(0, n1):
		hs.add(arr1[i])

	# Insert the elements of arr1[] to set hs
	for i in range(0, n2):
		hs.add(arr2[i])
	print("Union:")
	for i in hs:
		print(i, end=" ")
	print("\n")

	# Prints intersection of arr1[0..n1-1] and
	# arr2[0..n2-1]


def printIntersection(arr1, arr2, n1, n2):
	hs = set()

	# Insert the elements of arr1[] to set S
	for i in range(0, n1):
		hs.add(arr1[i])
	print("Intersection:")
	for i in range(0, n2):

		# If element is present in set then
		# push it to vector V
		if arr2[i] in hs:
			print(arr2[i], end=" ")


# Driver Program
arr1 = [7, 1, 5, 2, 3, 6]
arr2 = [3, 8, 6, 20, 7]
n1 = len(arr1)
n2 = len(arr2)

# Function call
printUnion(arr1, arr2, n1, n2)
printIntersection(arr1, arr2, n1, n2)

# This article is contributed by Kumar Suman .

--


======================================================================================================================================

-- Longest subarray with sum divisible by K

-- https://www.geeksforgeeks.org/longest-subarray-sum-divisible-k/
-- https://practice.geeksforgeeks.org/problems/longest-subarray-with-sum-divisible-by-k1259/1/
-- https://www.youtube.com/watch?v=hviDtcBVpho&t=192s

--

class Solution:
	def longSubarrWthSumDivByK (self,arr,  n, k) : 
		um = {}
		su = 0
		ans = 0
		um[0] = -1 # important coz insert rem = 0 at index -1 in dictionary
		for i in range(n):
		    su += arr[i]   # calculate sum
		    rem = su % k   # remainder calculated
		    if rem < 0: # for negative nums
		        rem = rem + k
		    if rem not in um:
		        um[rem] = i
		    else:
		        ans = max(ans, i-um[rem])
	    return ans
		        

--

========================================================================================================================================================

--  subarray sum equal k or Number of subarrays having sum exactly equal to k

-- https://practice.geeksforgeeks.org/problems/subarrays-with-sum-k/1/
-- https://www.geeksforgeeks.org/number-subarrays-sum-exactly-equal-k/\
-- https://www.youtube.com/watch?v=r1cwGocurtA

--
class Solution:
    def findSubArraySum(self, arr, N, k):
        preSum = {0 : 1} # instead of using presum array use just one variable
        res = 0
        cursum = 0
        for i in range(N):
            cursum += arr[i]
            diff = cursum - k
            
            if  diff in preSum:
                res += preSum[diff]
            
            if cursum in preSum:
                preSum[cursum] += 1
            else:
                preSum[cursum] = 1
            
        return res
--


==========================================================================================================================================================================

-- print all anagrams

-- https://practice.geeksforgeeks.org/problems/print-anagrams-together/1#
-- https://www.geeksforgeeks.org/given-a-sequence-of-words-print-all-anagrams-together/


-- 

from collections import defaultdict
class Solution:
    def Anagrams(self, words, n):
        res = []
        groupedWords = defaultdict(list)
 
        # Put all anagram words together in a dictionary
        # where key is sorted word
        for word in words:
            groupedWords["".join(sorted(word))].append(word)
     
        # Print all anagrams together
        for group in groupedWords.values():
            res.append(group)
        return res
        #code here

--

==================================================================================================================================

-- Valid sudoku


-- https://leetcode.com/problems/valid-sudoku/
-- https://www.youtube.com/watch?v=TjFXEUCMqI8
-- https://www.interviewbit.com/problems/valid-sudoku/
-- https://practice.geeksforgeeks.org/problems/is-sudoku-valid4820/1/
-- https://www.geeksforgeeks.org/check-if-given-sudoku-solution-is-valid-or-not/


-- 

from collections import defaultdict
class Solution:
    # @param A : tuple of strings
    # @return an integer
    def isValidSudoku(self, mat):
        cols = defaultdict(set)
        rows = defaultdict(set)
        squares = defaultdict(set)
        
        for r in range(9):
            for c in range(9):
                if mat[r][c] == ".":
                    continue
                    
                if (mat[r][c] in rows[r] or mat[r][c] in cols[c] or mat[r][c] in squares[(r//3,c//3)]):
                    return 0
                rows[r].add(mat[r][c])
                cols[c].add(mat[r][c])
                squares[(r//3,c//3)].add(mat[r][c])
        return 1

--

--

from collections import defaultdict
class Solution:
    def isValid(self, mat):
        # code here
        cols = defaultdict(set)
        rows = defaultdict(set)
        squares = defaultdict(set)
        
        for r in range(len(mat)):
            for c in range(len(mat[0])):
                if mat[r][c] == 0:
                    continue
                if (mat[r][c] in rows[r] or mat[r][c] in cols[c] or mat[r][c] in squares[(r//3,c//3)]):
                    return 0
                rows[r].add(mat[r][c])
                cols[c].add(mat[r][c])
                squares[(r//3,c//3)].add(mat[r][c])
        return 1

--



=========================================================================================================================================================================


-- Longest substring withut repeating characters

-- (refer this - method 1) https://www.interviewbit.com/problems/longest-substring-without-repeat/hints/
-- https://www.geeksforgeeks.org/length-of-the-longest-substring-without-repeating-characters/
-- https://practice.geeksforgeeks.org/problems/longest-distinct-characters-in-string5848/1

--
class Solution:
    # @param A : string
    # @return an integer
    # method - 1 using sliding window
    # use the method 1 with O(n)
    def lengthOfLongestSubstring(self, A):
        left = 0
        s = set() # either use set or hashmap
        res = 0
        for r in range(len(A)):
            while A[r] in s:
                s.remove(A[left])
                left+=1
            s.add(A[r]) 
            res = max(res, r-left+1)
        return res
        
        
        
    # method - 2 only using hashmaps 
    # hashmap with { char, index }
    def lengthOfLongestSubstring2(self, arr):
        fre = {}
        ans = 0
        start = 0
        for end in range(len(arr)):
            if arr[end] in fre:
                # If we have seen the number, move the start pointer
            # to position after the last occurrence
                start = max(start, fre[arr[end]] + 1)
            fre[arr[end]] = end
            ans = max(ans, end-start+1)
        return ans
    

--

==============================================================================================================================================

-- Find a triplet that sum to a given val ( 3 Sum)

-- https://www.geeksforgeeks.org/find-a-triplet-that-sum-to-a-given-value/

