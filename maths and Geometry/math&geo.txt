-- rotate matrix

-- https://leetcode.com/problems/rotate-image/submissions/
-- https://www.youtube.com/watch?v=fMSJSS7eO1w


--
class Solution:
    def rotate(self, matrix):
        """
        Do not return anything, modify matrix in-place instead.
        """
        l, r = 0, len(matrix) - 1
        while l < r:
            for i in range(r - l):
                top, bottom = l, r
                
                # save the topleft
                topLeft = matrix[top][l + i]
                
                # move bottom left into top left
                matrix[top][l + i] = matrix[bottom - i][l]
                
                # move bottom right into bottom left
                matrix[bottom - i][l] = matrix[bottom][r - i]
                
                # move top right into bottom right
                matrix[bottom][r - i] = matrix[top + i][r]
                
                # move top left into top right
                matrix[top + i][r] = topLeft
            r -= 1
            l += 1

--


===============================================================================================================================

-- spiral order

-- https://leetcode.com/problems/spiral-matrix/submissions/



--

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        res = []
        left, right = 0, len(matrix[0])
        top, bottom = 0, len(matrix)
        
        while left < right and top < bottom:
            # get every i in the top row
            for i in range(left, right):
                res.append(matrix[top][i])
            top += 1
            # get every i in the right col
            for i in range(top, bottom):
                res.append(matrix[i][right - 1])
            right -= 1
            if not (left < right and top < bottom):
                break
            # get every i in the bottom row
            for i in range(right - 1, left - 1, -1):
                res.append(matrix[bottom - 1][i])
            bottom -= 1
            # get every i in the left col
            for i in range(bottom - 1, top - 1, -1):
                res.append(matrix[i][left])
            left += 1
        
        return res

--


=======================================================================================================================================================

-- set matix zeros

-- https://leetcode.com/problems/set-matrix-zeroes/
-- https://www.interviewbit.com/problems/set-matrix-zeros/

-- 

class Solution(object):
    def setZeroes(self, A):
        r = set()
        c = set()
        for i in range(len(A)):
            for j in range(len(A[0])):
                if A[i][j] == 0:
                    r.add(i)
                    c.add(j)
        
        for i in range(len(A)):
            for j in range(len(A[0])):
                if (i in r) or (j in c):
                    A[i][j] = 0
                
--

=========================================================================================================================================================

-- detect squares

-- https://leetcode.com/problems/detect-squares/


--

class DetectSquares:

    def __init__(self):
        self.ptsCount = defaultdict(int)
        self.pts = []

    def add(self, point):
        self.ptsCount[tuple(point)] += 1
        self.pts.append(point)
        
    def count(self, point):
        res = 0
        px, py = point
        for x, y in self.pts:      
            if (abs(py - y) != abs(px - x)) or x == px or y == py:
                continue
            res += self.ptsCount[(x, py)] * self.ptsCount[(px, y)]
        return res

--


==============================================================================================================================================================

-- multiply strings

-- https://leetcode.com/problems/multiply-strings/submissions/


--

class Solution:
    def multiply(self, num1, num2):
        if "0" in [num1, num2]:
            return "0"
        
        res = [0] * (len(num1) + len(num2))
        num1, num2 = num1[::-1], num2[::-1]
        for i1 in range(len(num1)):
            for i2 in range(len(num2)):
                digit = int(num1[i1]) * int(num2[i2])
                res[i1 + i2] += digit
                res[i1 + i2 + 1] += res[i1 + i2] // 10
                res[i1 + i2] = res[i1 + i2] % 10
        
        res, beg = res[::-1], 0
        while beg < len(res) and res[beg] == 0:
            beg += 1
        res = map(str, res[beg:])
        return "".join(res)

--


===========================================================================================================================================================================


-- pow of n

-- https://leetcode.com/problems/powx-n/submissions/



--
class Solution:
    def myPow(self, x: float, n: int) -> float:
        div = False
        if n==0:
            return 1.0
        elif n == 1:
            return x
        elif n < 0:
            n = -n
            div = True
        ops = []
        while n >1:
            if n % 2:
                ops.append(False)
                n -=1
            else:
                ops.append(True)
                n //=2
                
        ops = ops[::-1]
        res = x
        for op in ops:
            if op:
                res *=res
            else:
                res *=x
                
        return 1/res if div else res 

--

=====================================================================================================================================================================================




