a= [[1,2,3,10], [4,5,6,11], [7,8,9,12]]
for i in a:
    print(i)
num = 11
row = 0
col = 2
for nums in a: // for columns
    print(nums[col])
    print(nums)


problems ==


1) Min Steps in Infinite Grid - 

You are in an infinite 2D grid where you can move in any of the 8 directions

 (x,y) to 
    (x-1, y-1), 
    (x-1, y)  , 
    (x-1, y+1), 
    (x  , y-1),
    (x  , y+1), 
    (x+1, y-1), 
    (x+1, y)  , 
    (x+1, y+1) 
You are given a sequence of points and the order in which you need to cover the points.. Give the minimum number of steps in which you can achieve it. You start from the first point.

NOTE: This question is intentionally left slightly vague. Clarify the question by trying out a few cases in the “See Expected Output” section.


Code == class Solution:
    # @param A : list of integers
    # @param B : list of integers
    # @return an integer
    def coverPoints(self, A, B):
        x = 0
        for i in range(len(A)-1):
            a = abs(A[i+1] - A[i])
            b = abs(B[i+1] - B[i])
            x+=(max(a,b))
        return x

=========================================================  =======================================================


Given an integer array A, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.

code === 

class Solution:
    # @param A : list of integers
    # @return a list of integers
    def solve(self, A):
        j = 0
        for i in range(len(A)): 
            if (A[i] != 0):
                A[j] = A[i]
                j += 1
        while j<len(A):
            A[j] = 0
            j += 1
        
        return A

=======================================================    =========================================================

3)
Given an array of integers A, sort the array into a wave like array and return it, In other words, arrange the elements into a sequence such that 

a1 >= a2 <= a3 >= a4 <= a5.....
NOTE : If there are multiple answers possible, return the one that's lexicographically smallest.

code ==

def wave(self, A):
        A.sort()
        for i in range(0, len(A) - 1, 2):
            A[i], A[i + 1] = A[i + 1], A[i]
        return A



=========================================================================================================================================================


-- Product of array except itself

-- https://leetcode.com/problems/product-of-array-except-self/submissions/

--
def productExceptSelf(self, nums):
        res = [1] * len(nums)
        prefix = 1
        for i in range(len(nums)):
            res[i] = prefix
            prefix *= nums[i]
        postfix = 1
        for i in range(len(nums)-1,-1,-1):
            res[i] *= postfix
            postfix *= nums[i]
        return res
        
--


============================================================================================================================================================

-- Encode and decode

-- https://medium.com/@miniChang8/leetcode-encode-and-decode-strings-4dde7e0efa1c


--

class Solution:
    """
    @param: strs: a list of strings
    @return: encodes a list of strings to a single string.
    """
    def encode(self, strs):
        res = ""
        for s in strs:
            res += str(len(s)) + "#" + s
        return res

    """
    @param: str: A string
    @return: dcodes a single string to a list of strings
    """
    def decode(self, str):
        res, i = [], 0

        while i < len(str):
            j = i
            while str[j] != "#":
                j += 1
            length = int(str[i:j])
            res.append(str[j + 1 : j + 1 + length])
            i = j + 1 + length
        return res

--


===================================================================================================================================================================

-- valid sudoku

-- https://leetcode.com/problems/valid-sudoku/


--
class Solution(object):
    def isValidSudoku(self, mat):
        cols = defaultdict(set)
        rows = defaultdict(set)
        squares = defaultdict(set)
        
        for r in range(9):
            for c in range(9):
                if mat[r][c] == ".":
                    continue
                if (mat[r][c] in rows[r] or mat[r][c] in cols[c] or mat[r][c] in squares[(r//3,c//3)]):
                    return 0
                rows[r].add(mat[r][c])
                cols[c].add(mat[r][c])
                squares[(r//3,c//3)].add(mat[r][c])
        return 1
--


==============================================================================================================================================================================

-- top k frequent elements

-- https://leetcode.com/problems/top-k-frequent-elements/submissions/
-- https://www.geeksforgeeks.org/find-k-numbers-occurrences-given-array/

--
from collections import defaultdict
class Solution:
    def topKFrequent(self, arr, k):
        um = defaultdict(lambda:0)
        res = []
        for i in range(len(arr)):
            if arr[i] in um:
                um[arr[i]] += 1
            else:
                um[arr[i]] = 1
        a = [0] * (len(um))
        j = 0
        for i in um:
            a[j] = [i, um[i]]
            j += 1
        a = sorted(a, key=lambda x: x[0],
                   reverse=True)
        a = sorted(a, key=lambda x: x[1],
                   reverse=True)
        for i in range(k):
            res.append(a[i][0])
        return res
        
--

============================================================================================================================================================================


-- group anagrams

-- https://leetcode.com/problems/group-anagrams/
-- https://www.geeksforgeeks.org/given-a-sequence-of-words-print-all-anagrams-together/

O(n+M)

--

from collections import defaultdict


def printAnagramsTogether(words):
	groupedWords = defaultdict(list)

	# Put all anagram words together in a dictionary
	# where key is sorted word
	for word in words:
		groupedWords["".join(sorted(word))].append(word)

	# Print all anagrams together
	for group in groupedWords.values():
		print(" ".join(group))


if __name__ == "__main__":
	arr = ["cat", "dog", "tac", "god", "act"]
	printAnagramsTogether(arr)

--


=================================================================================================================================================================================

-- contains duplicate (use Set)

-- https://leetcode.com/problems/contains-duplicate/submissions/


--
class Solution(object):
    def containsDuplicate(self, nums):
        s = set()
        for i in range(len(nums)):
            if nums[i] in s:
                return True
            s.add(nums[i])
        return False
--
======================================================================================================================================================================

-- valid anagrams

-- https://leetcode.com/problems/valid-anagram/