KMP algo

-- https://www.youtube.com/watch?v=JoF0Z7nVSrA&t=1532s
-- https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/

in Book b8

===================================================================================================================================================

-- Kadanes algo(Maximum subarray)

-- https://www.youtube.com/watch?v=w_KEocd__20
-- https://leetcode.com/problems/maximum-subarray/
-- https://www.interviewbit.com/blog/maximum-subarray-sum/

--

class Solution(object):
    def maxSubArray(self, nums):
        
        maxsum = nums[0] # important
        su = 0
        for i in range(len(nums)):
            su += nums[i]
            maxsum = max(maxsum, su)
            if su < 0:
                su = 0
        return maxsum

--

class Solution(object):
    def maxSubArray(self, nums):
        
        maxsum = nums[0]
        su = 0
        for i in range(len(nums)):
            su += nums[i]
            maxsum = max(maxsum, su)
            if su < 0:
                su = 0
        return maxsum
class Solution1:
    # @param A, a list of integers
    # @return an integer
    # 6:57
    def maxSubArray(self, A):
        if not A:
            return 0

        curSum = maxSum = A[0]
        for num in A[1:]:
            curSum = max(num, curSum + num)
            maxSum = max(maxSum, curSum)

        return maxSum
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [0]*len(nums)
        dp[0] = nums[0]
        for i in range(1, len(nums)):
            dp[i] = max(dp[i-1]+nums[i], nums[i])
        return max(dp)

--

==============================================================================================================================================================