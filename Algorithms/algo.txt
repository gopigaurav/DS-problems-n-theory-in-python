KMP algo

-- https://www.youtube.com/watch?v=JoF0Z7nVSrA&t=1532s
-- https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/
-- https://practice.geeksforgeeks.org/problems/longest-prefix-suffix2527/1
-- https://leetcode.com/problems/implement-strstr/submissions/


in Book b8

--
class Solution(object):
    def strStr(self, arr, s):
        if s == "": return 0
        n = len(s)
        lps = [0] * n   # lps[0] is always 0
      
        # length of the previous
        # longest prefix suffix
        l = 0
         
        # the loop calculates lps[i]
        # for i = 1 to n-1
        i = 1
        while (i < n) :
            if (s[i] == s[l]) :
                l = l + 1
                lps[i] = l
                i = i + 1
             
            else :
     
                # (pat[i] != pat[len])
                # This is tricky. Consider
                # the example. AAACAAAA
                # and i = 7. The idea is
                # similar to search step.
                if (l != 0) :
                    l = lps[l-1]
      
                    # Also, note that we do
                    # not increment i here
                 
                else :
                    # if (len == 0)
                    lps[i] = 0
                    i = i + 1
        
        i = 0
        j = 0
        while i < len(arr):
            if arr[i] == s[j]:
                i+=1
                j+=1
            else:
                if j == 0:
                    i+=1
                else:
                    j = lps[j-1]
            if j == len(s):
                return i - len(s)
        return -1
--

===================================================================================================================================================

-- Kadanes algo(Maximum subarray)

-- https://www.youtube.com/watch?v=w_KEocd__20
-- https://leetcode.com/problems/maximum-subarray/
-- https://www.interviewbit.com/blog/maximum-subarray-sum/

--

class Solution(object):
    def maxSubArray(self, nums):
        
        maxsum = nums[0] # important
        su = 0
        for i in range(len(nums)):
            su += nums[i]
            maxsum = max(maxsum, su)
            if su < 0:
                su = 0
        return maxsum

--

class Solution(object):
    def maxSubArray(self, nums):
        
        maxsum = nums[0]
        su = 0
        for i in range(len(nums)):
            su += nums[i]
            maxsum = max(maxsum, su)
            if su < 0:
                su = 0
        return maxsum
class Solution1:
    # @param A, a list of integers
    # @return an integer
    # 6:57
    def maxSubArray(self, A):
        if not A:
            return 0

        curSum = maxSum = A[0]
        for num in A[1:]:
            curSum = max(num, curSum + num)
            maxSum = max(maxSum, curSum)

        return maxSum
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [0]*len(nums)
        dp[0] = nums[0]
        for i in range(1, len(nums)):
            dp[i] = max(dp[i-1]+nums[i], nums[i])
        return max(dp)

--

==============================================================================================================================================================

-- Longest Prefix Suffix (KMP solution)


-- https://www.geeksforgeeks.org/longest-prefix-also-suffix/
-- https://www.youtube.com/watch?v=JoF0Z7nVSrA&t=1532s
-- https://practice.geeksforgeeks.org/problems/longest-prefix-suffix2527/1
-- https://leetcode.com/problems/implement-strstr/submissions/

--
class Solution:
	def lps(self, s):
		n = len(s)
        lps = [0] * n   # lps[0] is always 0
      
        # length of the previous
        # longest prefix suffix
        l = 0
         
        # the loop calculates lps[i]
        # for i = 1 to n-1
        i = 1
        while (i < n) :
            if (s[i] == s[l]) :
                l = l + 1
                lps[i] = l
                i = i + 1
             
            else :
     
                # (pat[i] != pat[len])
                # This is tricky. Consider
                # the example. AAACAAAA
                # and i = 7. The idea is
                # similar to search step.
                if (l != 0) :
                    l = lps[l-1]
      
                    # Also, note that we do
                    # not increment i here
                 
                else :
                    # if (len == 0)
                    lps[i] = 0
                    i = i + 1
      
        res = lps[n-1]
        return res

--

=====================================================================================================================================

-- 