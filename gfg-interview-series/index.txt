
########################  Interview series --> 73   #################################################################

-- https://practice.geeksforgeeks.org/contest/weekly-interview-series-73/problems/#



-- Dominant Pairs


-- Not completed
from typing import List


# u can use binary search or two pointer method

class Solution:
    def dominantPairs(self, n : int, arr : List[int]) -> int:
        a = []
        b = []
        cnt = 0
        for i in range(n/2):
            a.append(arr[i])
        for j in range(n/2, n):
            b.append(arr[j])
        
        i = 0
        j = 0
        b.sort()
        while i < len(a):
            if a[i] >= (5 * b[i]):
                cnt += 1
            
--


=======================================================================================================================================

-- Good subtrees

Note : if the time complex is less than like 50 or 60 use bit-masking
step. "OR" the subtree elements and check if the number of set bits are less than k or not  

--  this is the correct solution but dont know why its not working2


class Solution:
    ans = 0
    def goodSubtrees(self, root, k):
        self.dfs(root, k)
        return self.ans
    def dfs(self, node, k):
        if node == None:
            return 0
        mask = (1 << node.data)
        mask |= self.dfs(node.left, k)
        mask |= self.dfs(node.right, k)
            
        cnt = 0
        while mask:
                # if (mask & 1): cnt += 1
            cnt += mask & 1;
            mask>>=1
        if cnt <= k:
            self.ans += 1
        return mask
--


=========================================================================================================================================

-- Minimum sum

--
--



========================================================================================================================================================