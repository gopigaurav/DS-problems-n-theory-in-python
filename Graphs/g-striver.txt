
-- Number of Provices

-- https://www.geeksforgeeks.org/problems/number-of-provinces/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=number_of_provinces
-- https://www.youtube.com/watch?v=ACzkVtewUYA&list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&index=7
-- https://www.youtube.com/watch?v=muncqlKJrH0&list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&index=8


--
from collections import defaultdict

class Solution:
    def numProvinces(self, adj, V):
        # code here 
        n = len(adj)
        m = len(adj)
        
        g = defaultdict(list)
        
        for i in range(n):
            for j in range(m):
                if adj[i][j] == 1:
                    g[i].append(j)
                    g[j].append(i)
            
            
        vis = [0] * V
        def dfs(cur):
            vis[cur] = 1
            for node in g[cur]:
                if not vis[node]:
                    dfs(node)
        
        cnt = 0
        
        for i in range(V):
            if not vis[i]:
                cnt += 1
                dfs(i)
                
                
        return cnt
--



##########################################################################################################################################################################

-- Number of Islands


-- https://chat.openai.com/c/c2a155d1-4284-4165-85cd-f52a8aa395fd
-- https://www.youtube.com/watch?v=muncqlKJrH0&list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&index=8


--
from collections import defaultdict
import sys
sys.setrecursionlimit(10**8)
class Solution:
    def numIslands(self,grid):
        #code here
        n = len(grid)
        m = len(grid[0])
        
        
        def dfs(r, c, row, col, vis):
            if r < 0 or c < 0 or r >= row or c >= col or grid[r][c] != 1 or vis[r][c]:
                return
            vis[r][c] = 1
            
            for i in [-1, 0, 1]:
                for j in [-1, 0, 1]:
                    if i != 0 or j != 0:
                        new_row = r + i 
                        new_col = c + j
                        
                        dfs(new_row, new_col, row, col, vis)
            
            
        vis = [[0 for _ in range(m)] for _ in range(n)]
        
    
        cnt = 0
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1 and not vis[i][j]:
                    cnt += 1
                    dfs(i, j, n, m, vis)
        
        return cnt
                
--


=================================================================================================================================================

-- Flood fill algo


-- https://www.geeksforgeeks.org/problems/flood-fill-algorithm1856/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=flood-fill-algorithm
-- https://www.youtube.com/watch?v=C-2_uSRli8o&list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&index=9


--class Solution:
	def floodFill(self, image, sr, sc, newColor):
		#Code here
		
		n = len(image)
		m = len(image[0])
		
	def dfs(r, c, row, col, color):
            if r < 0 or c < 0 or r >= row or c >= col or image[r][c] != color:
                return
            image[r][c] = newColor
            
            dir = [(-1, 0), (1, 0), (0, -1), (0, 1)]

            
            for dr, dc in dir:
                new_row, new_col = r + dr, c + dc    
                dfs(new_row, new_col, row, col, color)
            
        initialCol = image[sr][sc]

        
        
        if initialCol != newColor:  # Only perform flood fill if the new color is different from the initial color
            dfs(sr, sc, n, m, initialCol)
        
        return image
--


======================================================================================================================================================

-- Rotten Oranges


-- https://www.geeksforgeeks.org/problems/rotten-oranges2536/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=rotten_oranges
-- https://www.youtube.com/watch?v=yf3oUhkvqA0&list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&index=11

--
class Solution:

    #Function to find minimum time required to rot all oranges. 
	def orangesRotting(self, grid):
		#Code here
		
		r = len(grid)
        c = len(grid[0])
        
        time = 0
        count = 0
        
        q = []
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 2:
                    q.append((i, j))
                    
                    
        while q:
            for _ in range(len(q)):
                i, j = q.pop(0)
                self.checkNei(i, j, grid, r, c, q)
            if q:
                time+=1
                
                
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    return -1 
                    
                    
        return time
    
    def checkNei(self, i, j, grid, r, c, q):
        x = [-1,1,0,0]
        y = [0,0,-1,1]
        for l in range(len(x)):
            if (i + x[l]<0 or i+x[l] >= r or j+y[l] < 0 or j+y[l]>=c or grid[i+x[l]][j+y[l]] != 1 ):
                continue
            q.append((i +x[l], j+y[l]))
            grid[i + x[l]][j+y[l]] = 2
--


===========================================================================================================================================================

-- Number of Enclaves (only use BFS)

-- Use this link
-- https://www.youtube.com/watch?v=rxKcepXQgU4&list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&index=15
--


--
from typing import List

class Solution:    
    def numberOfEnclaves(self, grid: List[List[int]]) -> int:
        n = len(grid)
        m = len(grid[0])
        
        def dfs(r, c, row, col):
            if r < 0 or c < 0 or r >= row or c >= col or grid[r][c] != 1:
                return
            
            grid[r][c] = 0
            
            directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
            
            for dr, dc in directions:
                new_row, new_col = r + dr, c + dc    
                dfs(new_row, new_col, row, col)
            
        for i in range(n):
            if grid[i][0]:
                dfs(i, 0, n, m)
                
        for i in range(n):
            if grid[i][m - 1]:
                dfs(i, m - 1, n, m)
                
        for i in range(m):
            if grid[0][i]:
                dfs(0, i, n, m)
                
        for i in range(m):
            if grid[n - 1][i]:
                dfs(n - 1, i, n, m)
                
        cnt = 0
        
        for i in range(n):
            for j in range(m):
                if grid[i][j]:
                    cnt += 1
        
        return cnt if cnt else 
--


======================================================================================================================================

-- Topological sorting  (use bfs instead of dfs)


-- https://www.geeksforgeeks.org/problems/topological-sort/1
-- https://www.youtube.com/watch?v=U3N_je7tWAs&list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&index=27


--
from collections import defaultdict
from collections import deque

class Solution:
    
    #Function to return list containing vertices in Topological order.
    def topoSort1(self, V, adj):
        # Code here
        
        g = defaultdict(list)
        

        for i in range(V):
            for node in adj[i]:
                g[i].append(node)
            
        res = []
        vis = [0] * V
        
        
        def dfs(node):
            vis[node] = 1
            
            for i in g[node]:
                if not vis[i]:
                    dfs(i)
                    
            res.append(node) # while leaving u need to insert it in the array or stack and at the reverse it

            
        for i in range(V):
            if not vis[i]:
                dfs(i)
                
                
        return res[::-1]
    
    
    # INdegree bfs kahns algo
    def topoSort(self, V, adj):
        
        ind = [0] * V
        g = defaultdict(list)
        
        for i in range(V):
            for node in adj[i]:
                g[i].append(node)
                ind[node] += 1
            
        q = deque()
        
        for i in range(V):
            if ind[i] == 0:
                q.append(i)
                
        
        
        res = []
        while q:
            
            node = q.popleft()
            res.append(node)
            
            for i in g[node]:
                ind[i] -= 1
                
                if ind[i] == 0:
                    q.append(i)
        
        return res
--



=======================================================================================================================================


-- Alien Dictionary

-- https://www.geeksforgeeks.org/problems/alien-dictionary/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=alien-dictionary
-- https://www.youtube.com/watch?v=U3N_je7tWAs&list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&index=27


--
#User function Template for python3
from collections import defaultdict, deque

class Solution:
    def findOrder(self,d, N, K):
    # code here
    
        
    # here for the order and all we use topological sort
    # but first we need to get the order of it right
    # so traverse throught the array and check for the nodes 
    # which appears in increasing order
        
        def topoSort(V, adj):
        
            ind = [0] * V
            g = defaultdict(list)
            
            for i in range(V):
                for node in adj[i]:
                    g[i].append(node)
                    ind[node] += 1
                
            q = deque()
            
            for i in range(V):
                if ind[i] == 0:
                    q.append(i)
                    
            
            
            res = []
            while q:
                
                node = q.popleft()
                res.append(node)
                
                for i in g[node]:
                    ind[i] -= 1
                    
                    if ind[i] == 0:
                        q.append(i)
            
            return res
            
            
        g = defaultdict(list)
        
        for i in range(N - 1):
            s1 = d[i]
            s2 = d[i + 1]
            
            for i in range(min(len(s1), len(s2))):
                if s1[i] != s2[i]:
                    g[ord(s1[i]) - ord('a')].append(ord(s2[i]) - ord('a'))
                    break
        
        result = topoSort(K, g)
        
        res = ""
        
        for i in range(len(result)):
            res += chr(ord('a') + result[i])
            
        return res
--



=========================================================================================================================================


--  Word ladder  (BFS)


-- https://www.geeksforgeeks.org/problems/word-ladder/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=word-ladder
-- https://leetcode.com/problems/word-ladder/submissions/1237986056/
-- https://www.youtube.com/watch?v=tRPda0rcf8E&list=PLgUwDviBIf0oE3gA41TKO2H5bHpPd7fzn&index=30

--
from collections import deque

class Solution:
	def wordLadderLength(self, startWord, targetWord, wordList):
		#Code here
		
		# Using the BFS
		
		# first put the startword in queue
		
		# u need to take set instead of array
		# make the input to set
		# change the startword one by one character and check for the hit in the set
		# if its present then we increase the level and remove the hit word from the set
		
		S = set(wordList)
		
		q = deque([(startWord, 1)])
		res = float("inf")
		
		while q:
		    word, level = q.popleft()
		    
		    if word == targetWord:
		        res = min(res, level)
		    
 
		    for i in range(len(word)):
		        original = word
		  
		        for alpha in range(26):
		            
		            new_word = word[:i] + chr(ord('a') + alpha) + word[i + 1:]
		            
		            if new_word in S:
		                q.append((new_word, level + 1))
		                S.remove(new_word)
		
		            
		            
        
        return res if res != float("inf") else 0
--


========================================================================================================================================