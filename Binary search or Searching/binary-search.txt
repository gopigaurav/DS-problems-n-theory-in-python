-- Allocate Pages (imp) or same as Book allocation


-- https://www.geeksforgeeks.org/allocate-minimum-number-pages/
-- https://practice.geeksforgeeks.org/problems/allocate-minimum-number-of-pages0937/1

--
 class Solution:
    
    #Function to find minimum number of pages.
    def findPages(self,A, N, M):
        def sol(arr, n, m, cmin):
            k = 1
            csum = 0
            
            for i in range(n):
                if cmin < arr[i]:
                    return False
                if csum + arr[i] > cmin:
                    k += 1
                    csum = arr[i]
                    
                    if k > m:
                        return False
                else:
                    csum += arr[i]
                    
            return True
                    
            
            
            
        if M > N:
            return -1
        start = 0
        end = 0
        for i in range(N):
            end += A[i]
            start = max(start, A[i])
        
        res = 0
        while start <= end:
            mid = ( start + end )// 2
            
            if sol(A, N, M, mid):
                res = mid
                end = mid - 1
            else:
                start = mid + 1
        return res
--


==================================================================================================================================

-- Median of two sorted array

-- https://leetcode.com/problems/median-of-two-sorted-arrays/submissions/
-- https://www.geeksforgeeks.org/median-of-two-sorted-arrays-of-different-sizes/



--
class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        A, B = nums1, nums2
        total = len(nums1) + len(nums2)
        
        if (len(A) > len(B)):
            A, B = B, A  # Swapping to make A smaller
        n = len(A)
        m = len(B)
        start = 0
        end = n
        realmidinmergedarray = (n + m + 1) // 2
  
        while (start <= end):
            
            mid = (start + end) // 2
            # mid for A
            leftAsize = mid
            
            # median for B
            leftBsize = realmidinmergedarray - mid
              
            # checking overflow of indices
            leftA = A[leftAsize - 1] if (leftAsize > 0) else float('-inf')
            leftB = B[leftBsize - 1] if (leftBsize > 0) else float('-inf')
            rightA = A[leftAsize] if (leftAsize < n) else float('inf')
            rightB = B[leftBsize] if (leftBsize < m) else float('inf')
  
            # if correct partition is done
            if leftA <= rightB and leftB <= rightA:
                if ((m + n) % 2 == 0):
                    return (max(leftA, leftB) + min(rightA, rightB)) / 2.0
                return max(leftA, leftB)
  
            elif (leftA > rightB):
                end = mid - 1
            else:
                start = mid + 1
--

================================================================================================================================================================================

-- The painters partition problem

-- https://practice.geeksforgeeks.org/problems/the-painters-partition-problem1535/1
-- https://www.geeksforgeeks.org/painters-partition-problem/


--
class Solution:
    def minTime (self, A, n, k):
        def sol(arr, n, m, cmin):
            k = 1
            csum = 0
            
            for i in range(n):
                if cmin < arr[i]:
                    return False
                if csum + arr[i] > cmin:
                    k += 1
                    csum = arr[i]
                    
                    if k > m:
                        return False
                else:
                    csum += arr[i]
                    
            return True
                    
            
            
        # no need or can be taken 
        # if k > n:
        #    return -1
        start = 0
        end = 0
        for i in range(n):
            end += A[i]
            start = max(start, A[i])
        
        res = 0
        while start <= end:
            mid = ( start + end )// 2
            
            if sol(A, n, k, mid):
                res = mid
                end = mid - 1
            else:
                start = mid + 1
        return res
--