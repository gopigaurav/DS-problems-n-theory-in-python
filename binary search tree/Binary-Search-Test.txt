
-- Some problems are also in interview series and jobathon series

-- chack for valid bst ---> O(n)

-- https://leetcode.com/problems/validate-binary-search-tree/submissions/
-- https://practice.geeksforgeeks.org/problems/check-for-bst/1
-- https://www.geeksforgeeks.org/a-program-to-check-if-a-binary-tree-is-bst-or-not/


--
class Solution(object):
    def isValidBST(self, node):
        min = float("-inf")
        max = float("inf")
        return self.sol(node, min, max)
        
        
        
    def sol(self, root, min, max):
        # if no root return then its bst
	# go from top to bottom
        if not root:
            return True
            
        # the root.data should be in range min and max ==> min < root.data <max
        if max < root.val or root.val < min:
            return False
        
        return (self.sol(root.left, min, root.val - 1) and self.sol(root.right, root.val+1, max))

--

==================================== IMPORTANT ====================================================================================================

-- Maximum subtree sum in Binary tree which is also BST

-- https://www.codingninjas.com/codestudio/problems/maximum-sum-bst-in-binary-tree_2099910?leftPanelTab=2      ==> O(N**2)
-- https://ide.geeksforgeeks.org/7PZVra4RYp
-- https://www.youtube.com/watch?v=Zz7R9I9j2kI
-- https://www.geeksforgeeks.org/maximum-sub-tree-sum-in-a-binary-tree-such-that-the-sub-tree-is-also-a-bst/
-- https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/submissions/


-- 
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
INT_MIN = float("-inf")
INT_MAX = float("inf")

class Info:
    def __init__(self, rmini, lmaxi, bst, s):
        self.sum = s
        self.max = lmaxi
        self.min = rmini
        self.bst = bst
        
class Solution(object):
    maxsum = 0
    def maxSumBST(self, root):
        self.maxsum = 0
        self.sol(root)
        return self.maxsum
        
    def sol(self, root):
        if not root:
            return Info(INT_MAX, INT_MIN, True, 0)
        
        if not root.left and not root.right:
            if self.maxsum < root.val:
                self.maxsum = root.val
            return Info(root.val, root.val, True, root.val)
        
        l = self.sol(root.left)
        r = self.sol(root.right)
        
        np = Info(None, None, None, l.sum + r.sum + root.val)
        #np.sum = (l.sum + r.sum + root.val)
        
        if root.val > l.max and root.val < r.min and l.bst and r.bst:                         
            np.bst = True
            #np.min = min(root.val,min(l.min, r.min)) 
            #np.max = max(root.val,max(r.max, l.max))
            if self.maxsum < np.sum:
                self.maxsum = np.sum
        else: 
            np.bst = False
            
        np.min = min(root.val, min(l.min, r.min)) 
        np.max = max(root.val, max(r.max, l.max))
        return np
        
        
--


========================================= IMPORTANT ============================================================================================


-- Largest BST in a Binary tree


-- Given a Binary Tree, write a function that returns the size of the largest subtree which is also a Binary Search Tree (BST). If the complete Binary Tree is BST,
 then return the size of the whole tree.



-- (refer this) https://www.youtube.com/watch?v=X0oXMdtUDwo

-- https://www.geeksforgeeks.org/largest-bst-binary-tree-set-2/
-- https://practice.geeksforgeeks.org/problems/largest-bst/1
-- https://www.codingninjas.com/codestudio/problems/largest-bst-subtree_893103?leftPanelTab=1

--
class NodeValue:
    def __init__(self, minNode, maxNode, maxSize):
        self.minNode = minNode
        self.maxNode = maxNode
        self.maxSize = maxSize
class Solution:
    # Return the size of the largest sub-tree which is also a BST
    #maxSize = 0
    INT_MIN = float("-inf")
    INT_MAX = float("inf")
    def largestBst(self, root):
        # return self.sol(root).maxSize
        temp = self.sol(root)
        return temp.maxSize
    
    def sol(self,root):
        if not root:
            return NodeValue(self.INT_MAX, self.INT_MIN, 0)
            
        l = self.sol(root.left)
        r = self.sol(root.right)
        
        if l.maxNode < root.data and r.minNode > root.data:
            # if BST
		# here left.minNode will always be less and max for right
            return NodeValue(min(root.data, l.minNode), max(root.data, r.maxNode), (l.maxSize + r.maxSize + 1))
            
        # if not bst
        return NodeValue(self.INT_MIN, self.INT_MAX, max(l.maxSize, r.maxSize))

--


=================================================================================================================================================