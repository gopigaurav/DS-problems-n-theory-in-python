left shift => x << 1 ==> x*2
right shift => x >> 1 ==> x/2

x & (x-1) will clear the lowest set bit of x
x & ~(x-1) extracts the lowest set bit of x
x & ~(x + (1 << n)) the run of set bits (possibly length 0) in x,
			starting at bit n

x | (x + 1) x with the lowest cleared bit set 


=============================================================================================================================================

-- Counting bits 

-- https://leetcode.com/problems/counting-bits/submissions/815708038/

===========================================================================================================================================

-- Convert Decimal to binary

-- 

def sol(n):
	ans = []
	while n:
		ans.append(n%2):
		n/=2
	return ans[::-1]

--

======================================================================================================================================================

-- Count Number of set bits

-- https://www.geeksforgeeks.org/count-set-bits-in-an-integer/

def sol(n):
	count = 0
	while(n):
		if n & 1: # or u can use count += n & 1
			count += 1
		n >>= 1
	return count

-- 
		

========================================================================================================================================
-- Single Number

-- https://leetcode.com/problems/single-number/submissions/

--
class Solution(object):
    def singleNumber(self, nums):
        res = 0
        for i in range(len(nums)):
            res ^= nums[i]
        return res
        
--

==================================================================================================================================

-- count set bits

-- https://leetcode.com/problems/number-of-1-bits/submissions/


--
class Solution(object):
    def hammingWeight(self, n):
        count = 0
        while n:
            count += n & 1
            n >>= 1
        return count
--


==============================================================================================================================================

-- Counting bits

-- https://leetcode.com/problems/counting-bits/submissions/



--
class Solution:
    def countBits(self, n):
        dp = [0] * (n + 1)
        offset = 1
        
        for i in range(1, n + 1):
            if offset * 2 == i:
                offset = i
            dp[i] = 1 + dp[i - offset]
        return dp

--


===========================================================================================================================================================

-- Reverse Bits

-- https://leetcode.com/problems/reverse-bits/


--

class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        res = 0
        
        for i in range(32):
            bit = (n >> i) & 1
            res = res | (bit << (31-i))
        return res

--

===============================================================================================================================================================

-- Missing Number

while the numbers are from 0 to N

-- https://leetcode.com/problems/missing-number/submissions/


--

class Solution(object):
    def missingNumber(self, arr):
        res = 0
        i = 0
        while i < len(arr):
            correctPos = arr[i]
            
            if arr[i] < len(arr) and arr[i] != arr[correctPos]:
                arr[i], arr[correctPos] = arr[correctPos], arr[i]
            else:
                i+=1
        for i in range(len(arr)):
            if arr[i] != i:
                return i
        return len(arr)
                
            
--- 

===================================================================================================================================================================================================

-- add two numbers without operator

-- https://leetcode.com/problems/sum-of-two-integers/discuss/489210/Read-this-if-you-want-to-learn-about-masks



--

class Solution:
    def getSum(self, a, b):
        
        # 32 bit mask in hexadecimal
        mask = 0xffffffff
        
        # works both as while loop and single value check 
        while (b & mask) > 0:
            
            carry = ( a & b ) << 1
            a = (a ^ b) 
            b = carry
        
        # handles overflow
        return (a & mask) if b > 0 else a

--



================================================================================================================================================================================================

-- reverse integers

-- https://leetcode.com/problems/reverse-integer/submissions/


--

class Solution:
    # @return an integer
    def reverse(self, x):
        result = 0

        if x < 0:
            symbol = -1
            x = -x
        else:
            symbol = 1

        while x:
            result = result * 10 + x % 10
            x /= 10

        return 0 if result > pow(2, 31) else result * symbol

--

======================================================================================================================================================================

-- Insert Intervals

-- https://leetcode.com/problems/insert-interval/submissions/


--
class Solution:
    def insert(self, intervals, newInterval):
        res = []
        
        for i in range(len(intervals)):
            
            # if newInterval end is < ith interval start
            if newInterval[1] < intervals[i][0]:
                res.append(newInterval)
                return res + intervals[i:]
            
            # if newInterval start > ith interval end
            elif newInterval[0] > intervals[i][1]:
                res.append(intervals[i])
                
            # when the intervals are overlapped
            else:
                newInterval = [min(newInterval[0], intervals[i][0]), max(newInterval[1], intervals[i][1])]
        res.append(newInterval)
        
        return res

-- 


======================================================================================================================================================================================================

-- Merge Intervals

-- https://leetcode.com/problems/merge-intervals/


--

class Solution:
    def merge(self, intervals):
        
        # sort the start of the intervals
        intervals.sort(key = lambda x : x[0])
        
        # at start store the first val in the output
        output = [intervals[0]]
        
        for start, end in intervals:
            lastEnd = output[-1][1]
            
            # if new start is less than or equal to previous lastend
            # means there is a overlap
            if start <= lastEnd: 
                # merge
                # and extend the end interval
                output[-1][1] = max(lastEnd, end)
            else:
                output.append([start, end])
        return output


--

==============================================================================================================================================================

-- non overlapping intervals count


-- https://leetcode.com/problems/non-overlapping-intervals/

--
class Solution:
    def eraseOverlapIntervals(self, intervals): 
        intervals.sort()
        res = 0
        prevEnd = intervals[0][1]
        for start, end in intervals[1:]:
            # start of ith is greater than previous end
            if start >= prevEnd:
                prevEnd = end
            else:
                res += 1
                # overlapping intervals then increase count
                prevEnd = min(end, prevEnd)
        return res
--

====================================================================================================================================================================

-- meeting rooms


-- 
class Solution:
    """
    @param intervals: an array of meeting time intervals
    @return: if a person could attend all meetings
    """
    def canAttendMeetings(self, intervals):
        intervals.sort(key = lambda i : i.start)

        for i in range(1, len(intervals)):
            i1 = intervals[i - 1]
            i2 = intervals[i]

            if i1.end > i2.start:
                return False
        return True  
--

=============================================================================================================================================================================

-- meeting rooms required

-- https://neetcode.io/
-- https://www.interviewbit.com/problems/meeting-rooms/


--
class Solution:
    def solve(self, intervals):
        start = sorted([i[0] for i in intervals])
        end = sorted([i[1] for i in intervals])

        res, count = 0, 0
        s, e = 0, 0
        while s < len(intervals):
            if start[s] < end[e]:
                s += 1
                count += 1
            else:
                e += 1
                count -= 1
            res = max(res, count)
        return res
--


===============================================================================================================================================================================




 


