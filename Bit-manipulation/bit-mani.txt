-- Single Number

-- https://leetcode.com/problems/single-number/submissions/

--
class Solution(object):
    def singleNumber(self, nums):
        res = 0
        for i in range(len(nums)):
            res ^= nums[i]
        return res
        
--

==================================================================================================================================

-- count set bits

-- https://leetcode.com/problems/number-of-1-bits/submissions/


--
class Solution(object):
    def hammingWeight(self, n):
        count = 0
        while n:
            count += n & 1
            n >>= 1
        return count
--


==============================================================================================================================================

-- Counting bits

-- https://leetcode.com/problems/counting-bits/submissions/



--
class Solution:
    def countBits(self, n):
        dp = [0] * (n + 1)
        offset = 1
        
        for i in range(1, n + 1):
            if offset * 2 == i:
                offset = i
            dp[i] = 1 + dp[i - offset]
        return dp

--


===========================================================================================================================================================

-- Reverse Bits

-- https://leetcode.com/problems/reverse-bits/


--

class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        res = 0
        
        for i in range(32):
            bit = (n >> i) & 1
            res = res | (bit << (31-i))
        return res

--

===============================================================================================================================================================

-- Missing Number

while the numbers are from 0 to N

-- https://leetcode.com/problems/missing-number/submissions/


--

class Solution(object):
    def missingNumber(self, arr):
        res = 0
        i = 0
        while i < len(arr):
            correctPos = arr[i]
            
            if arr[i] < len(arr) and arr[i] != arr[correctPos]:
                arr[i], arr[correctPos] = arr[correctPos], arr[i]
            else:
                i+=1
        for i in range(len(arr)):
            if arr[i] != i:
                return i
        return len(arr)
                
            
--- 

=================================================================================================================================================================

-- 
