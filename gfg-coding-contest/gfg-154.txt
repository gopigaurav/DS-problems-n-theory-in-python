

-- https://practice.geeksforgeeks.org/contest/gfg-weekly-coding-contest-154/problems

-- XOR Game


--
class Solution:

    def xorGame(self, X: int) -> int:
        # code here
        
        
        def cal(x, y, mod):
            res = 1
            
            x = x % mod
            
            if x == 0:
                return 0
                
            while y:
                
                if y & 1: # checking for odd
                    res = (res * x) % mod
                    
                y = y >> 1
                x = (x * x) % mod
            return res
        
        
        return cal(3, X, 1000000007)
            
--


================================================================================================


-- Arranging horses (Topo sort with min heap)


-- https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/

--
from typing import List
from collections import defaultdict
from heapq import heappop, heappush


class Solution:
    def arrangingHorses(self, n: int, m: int, data: List[List[int]]) -> List[int]:
        # Create an array for indegrees and an adjacency list
        indegree = [0] * n
        adj = defaultdict(list)
        
        # Populate the adjacency list and indegree array
        for u, v in data:
            adj[v].append(u)
            indegree[u] += 1
        
        # Min-heap to ensure lexicographically smallest order
        heap = []
        
        # Push all nodes with indegree 0 into the heap
        for i in range(n):
            if indegree[i] == 0:
                heappush(heap, i)
        
        res = []
        
        # Perform the topological sort using a min-heap
        while heap:
            node = heappop(heap)
            res.append(node)
            for neighbor in adj[node]:
                indegree[neighbor] -= 1
                if indegree[neighbor] == 0:
                    heappush(heap, neighbor)
        
        # Return the resulting order
        return res
--


================================================================================================================

