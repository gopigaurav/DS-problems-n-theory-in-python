-- Maximum index

-- https://www.geeksforgeeks.org/given-an-array-arr-find-the-maximum-j-i-such-that-arrj-arri/


--
# For a given array arr[],
# returns the maximum j â€“ i such that
# arr[j] > arr[i] */
def maxIndexDiff(arr, n):
	
	leftMin = [0]*n
	leftMin[0] = arr[0]
	for i in range(1,n):
		leftMin[i] = min(leftMin[i-1], arr[i])
		
	# leftMin[i] = min arr[0...i]
	maxDist = - 2**32
	i = n-1
	j = n-1
	
	while(i>=0 and j>=0):
		
		if(arr[j] >= leftMin[i]):
			maxDist = max(maxDist, j-i)
			i-=1
		else:
			j-=1
			
	return maxDist

# Driver Code
arr = [34,8,10,3,2,80,30,33,1]
n = len(arr)
maxDiff = maxIndexDiff(arr, n)
print(maxDiff)

# This code is contributed by Shubham Singh

--


========================================================================================================================================================

-- Minimum Number of platforms 

-- https://www.geeksforgeeks.org/minimum-number-platforms-required-railwaybus-station/
-- https://practice.geeksforgeeks.org/problems/minimum-platforms-1587115620/1


--
class Solution:    
    #Function to find the minimum number of platforms required at the
    #railway station such that no train waits.
    def minimumPlatform(self,n,start,end):
        start.sort()
        end.sort()
        res, count = 0, 0
        s, e = 0, 0
        
        # if  i of start < e of end the increment s and count
        # else decrement count and increment e
        while s < len(start):
            if start[s] <= end[e]:
                s += 1
                count += 1
            else:
                e += 1
                count -= 1
            res = max(res, count)
        return res
--


=============================================================================================================================================================

-- Relative sort 

-- https://leetcode.com/problems/relative-sort-array/submissions/
-- https://practice.geeksforgeeks.org/problems/relative-sorting4323/1
-- https://www.geeksforgeeks.org/sort-array-according-order-defined-another-array/



--
class Solution(object):
    def relativeSortArray(self, A1, A2):
        N = len(A1)
        um = {}
        for i in range(N):
            um[A1[i]] = um.get(A1[i],0) + 1
            
        index = 0
        for i in range(len(A2)):
            if A2[i] in um:
                count = um[A2[i]]
                while count:
                    A1[index] = A2[i]
                    count -= 1
                    index += 1
                um.pop(A2[i])
        
        if um:
            for i in sorted(um.keys()):
                count = um[i]
                while count:
                    A1[index] = i
                    count -= 1
                    index += 1
                #um.pop(num)
        return A1

--

========================================================================================================================================================================

-- Count inversions in an array


-- https://www.geeksforgeeks.org/counting-inversions/
-- https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1
-- https://www.youtube.com/watch?v=kQ1mJlwW-c0

--
class Solution:
    #User function Template for python3
    
    # arr[]: Input Array
    # N : Size of the Array arr[]
    #Function to count inversions in the array.
    def inversionCount(self, arr, n):
        temp_arr = [0]*n
        def _mergeSort(arr, temp_arr, left, right):
            inv_count = 0
          
            # We will make a recursive call if and only if
            # we have more than one elements
          
            if left < right:
          
                # mid is calculated to divide the array into two subarrays
                # Floor division is must in case of python
          
                mid = (left + right)//2
          
                # It will calculate inversion
                # counts in the left subarray
          
                inv_count += _mergeSort(arr, temp_arr,
                                        left, mid)
          
                # It will calculate inversion
                # counts in right subarray
          
                inv_count += _mergeSort(arr, temp_arr,
                                        mid + 1, right)
          
                # It will merge two subarrays in
                # a sorted subarray
          
                inv_count += merge(arr, temp_arr, left, mid, right)
            return inv_count
            

        def merge(arr, temp_arr, left, mid, right):
                i = left     # Starting index of left subarray
                j = mid + 1  # Starting index of right subarray
                k = left     # Starting index of to be sorted subarray
                inv_count = 0
              
                # Conditions are checked to make sure that
                # i and j don't exceed their
                # subarray limits.
              
                while i <= mid and j <= right:
              
                    # There will be no inversion if arr[i] <= arr[j]
              
                    if arr[i] <= arr[j]:
                        temp_arr[k] = arr[i]
                        k += 1
                        i += 1
                    else:
                        # Inversion will occur.
                        temp_arr[k] = arr[j]
                        inv_count += (mid-i + 1)
                        k += 1
                        j += 1
              
                # Copy the remaining elements of left
                # subarray into temporary array
                while i <= mid:
                    temp_arr[k] = arr[i]
                    k += 1
                    i += 1
              
                # Copy the remaining elements of right
                # subarray into temporary array
                while j <= right:
                    temp_arr[k] = arr[j]
                    k += 1
                    j += 1
              
                # Copy the sorted subarray into Original array
                for loop_var in range(left, right + 1):
                    arr[loop_var] = temp_arr[loop_var]
              
                return inv_count
        return _mergeSort(arr, temp_arr, 0, n-1)
--


=============================================================================================================================================

-- 3 sum 

-- https://practice.geeksforgeeks.org/problems/triplet-sum-in-array-1587115621/1
-- https://leetcode.com/problems/3sum/


--
class Solution:
     
    #Function to find if there exists a triplet in the 
    #array A[] which sums up to X.
    def find3Numbers(self,nums, n, X):
        res = []
        nums.sort()
        
        for i, a in enumerate(nums):
            if i > 0 and a == nums[i - 1]:
                continue
            
            l, r = i + 1, len(nums) - 1
            while l < r:
                threeSum = a + nums[l] + nums[r]
                if threeSum > X:
                    r -= 1
                elif threeSum < X:
                    l += 1
                    
                # if number is equal to 0 or the given value
                else:
                    res.append([a, nums[l], nums[r]])
                    l += 1
                    # check for duplicate elements
                    # if there are duplicate elements them increment from left
                    while nums[l] == nums[l - 1] and l < r:
                        l += 1
        return res
--




==================================================================================================================================================================
-- count number of triplets in an array having sum in range

-- https://www.geeksforgeeks.org/count-number-of-triplets-in-an-array-having-sum-in-the-range-a-b/
-- https://www.youtube.com/watch?v=9455buJlb_k


--
class Solution:
    def countTriplets(self, arr, N, a, b):
        def sol(nums, X):
            res = []
            nums.sort()
            ans = 0
            for i, a in enumerate(nums):
                l, r = i + 1, len(nums) - 1
                while l < r:
                    threeSum = a + nums[l] + nums[r]
                    if threeSum > X:
                        r -= 1
                    # if number is equal to 0 or the given value
                    else :
                        
                        # if threesum less than or eual to value then the ans = r - l
                        # becoz => if once sum less than value then the left val sum is also less than value
                        
                        ans += (r - l)
                        l += 1
            return ans
        
        res = 0
     
        # Find count of triplets
        # having sum less than or
        # equal to b and subtract
        # count of triplets having
        # sum less than or equal to a-1.
        res = (sol(arr, b) -
            sol(arr, a - 1))
     
        return res
--


=========================================================================================================================================================================================================

-- count the number of possible triangles

-- https://practice.geeksforgeeks.org/problems/count-possible-triangles-1587115620/1
-- https://www.geeksforgeeks.org/find-number-of-triangles-possible/


--
class Solution:
    #Function to count the number of possible triangles.
    def findNumberOfTriangles(self, arr, n):
        arr.sort()
        ans = 0
        # check for conditions ==> a + b > c , b + c > a, a + c > a  
        for c in range(n-1, 1, -1):
            b = c - 1
            a = 0 
            while a < b:
                if arr[a] + arr[b] > arr[c]:
                    ans += b - a
                    b -= 1
                else:
                    a+=1
        return ans
--




