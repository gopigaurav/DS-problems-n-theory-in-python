-- Max sum subarray of size k 
-- https://practice.geeksforgeeks.org/problems/max-sum-subarray-of-size-k5313/1
-- https://www.geeksforgeeks.org/find-maximum-minimum-sum-subarray-size-k/


-- class Solution:
    def maximumSumSubarray (self,k,arr,N):
        l,r=0,0
        csum = 0
        maxsum = 0
        while r < len(arr):
            csum += arr[r]
            if r-l+1 < k:
                r+= 1
            elif r-l+1 == k:
                maxsum = max(maxsum, csum)
                csum = csum - arr[l]
                l+=1
                r+=1
                
            # not needed extra elif
            elif r-l+1 > k:
                csum -= arr[l]
                l+=1
            
        return maxsum


=============================================================================================================================================

-- smallest subarray with sum k (also hashmap)

-- https://www.geeksforgeeks.org/smallest-subarray-with-sum-k-from-an-array/
-- https://www.youtube.com/watch?v=XzwUBIkR9pA&t=36s
-- https://leetcode.com/problems/minimum-size-subarray-sum/
-- https://leetcode.com/problems/minimum-size-subarray-sum/submissions/

--

class Solution(object):
    def minSubArrayLen(self, s, nums):
        total = left = right = 0
        res = len(nums) + 1
        while right < len(nums):
            total += nums[right]
            while total >= s:
                res = min(res, right-left+1)
                total -= nums[left]
                left += 1
            right += 1
        return res if res <= len(nums) else 0
--



--
# Python3 program to implement
# the above approach
from collections import defaultdict
import sys

# Function to find the length of the
# smallest subarray with sum K
def subArraylen(arr, n, K):

mp = defaultdict(lambda : 0)
currPrefixSum = 0
result = sys.maxsize
for i in range(n):
	currPrefixSum += arr[i]
	if(currPrefixSum == K):
	currLen = i + 1
	result = min(result, currLen)
	requirePrefixSum = currPrefixSum - K
	
	if(requirePrefixSum in mp.keys()):
	foundIdx = mp[requirePrefixSum]
	currIdx = i
	result = min(result, currIdx - foundIdx)
	
	mp[currPrefixSum] = i
return result
	
	
# Driver Code
if __name__ == "__main__":
arr = [-8, -8, -3, 8]
n = len(arr)

K = 5

ln = subArraylen(arr, n, K)

# Function call
if(ln == sys.maxsize):
	print("-1")
else:
	print(ln)

# This code is contributed by Shivam Singh

--


===================================================================================================================================================

-- Minimum window sliding

-- https://www.youtube.com/watch?v=jSto0O4AJbM&t=630s
-- https://leetcode.com/problems/minimum-window-substring/submissions/

--
from collections import defaultdict
class Solution(object):
    def minWindow(self, s, t):
        if t == "": return ""
        mpt = {}
        mps = {}
        for c in t:
            mpt[c] = mpt.get(c,0) + 1
        have = 0
        need = len(mpt)
        res, resLen = [-1, -1], float("infinity")
        l = 0
        for r in range(len(s)):
            c = s[r]
            mps[c] = 1 + mps.get(c,0)
            if c in mpt and mps[c] == mpt[c]:
                have += 1
            while have == need:
                # update our result
                if (r - l + 1) < resLen:
                    res = [l, r]
                    resLen = (r - l + 1)
                # pop from the left of our window
                mps[s[l]] -= 1
                if s[l] in mpt and mps[s[l]] < mpt[s[l]]:
                    have -= 1
                l += 1
        l, r = res
        return s[l:r+1] if resLen != float("infinity") else ""
            
--

==============================================================================================================================================================

-- Longest substring without repeating chracters


-- https://www.geeksforgeeks.org/length-of-the-longest-substring-without-repeating-characters/
-- https://leetcode.com/problems/longest-substring-without-repeating-characters/


--

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        ch = {}
        res = 0
        l = 0
        for r in range(len(s)):
            while s[r] in ch:
                if s[l] in ch:
                    ch[s[l]]-=1
                del ch[s[l]]
                l+=1
            ch[s[r]] = ch.get(s[r],0)+1
            res = max(res,r-l+1)
        return res


--


==========================================================================================================================================================================

-- sliding window maximum

-- using queue
-- https://leetcode.com/problems/sliding-window-maximum/submissions/
-- https://www.youtube.com/watch?v=xFJXtB5vSmM
-- https://practice.geeksforgeeks.org/problems/deee0e8cf9910e7219f663c18d6d640ea0b87f87/1


-- 

class Solution(object):
    def maxSlidingWindow(self, nums, k):
        res = []
        q = []
        l=0
        r = 0
        while r < (len(nums)):
            while q and q[-1] < nums[r]:
                q.pop()
            q.append(nums[r])
            if r-l+1 < k:
                r+=1
            elif r-l+1 == k: 
                res.append(q[0])
                if q[0] == nums[l]:
                    q.pop(0)
                l+=1
                r+=1
        return res
                
                
                
                
--

============================================================================================================================================================================


-- trapping rain water

-- https://leetcode.com/problems/trapping-rain-water/
-- https://www.youtube.com/watch?v=ZI2z5pq0TqA&t=55s



--

class Solution:
    def trap1(self,height):
        
        if len(height)<= 2:
            return 0
        
        ans = 0
        
        #using two pointers i and j on indices 1 and n-1
        i = 1
        j = len(height) - 1
        
        #initialising leftmax to the leftmost bar and rightmax to the rightmost bar
        lmax = height[0]
        rmax = height[-1]
        
        while i <=j:
            # check lmax and rmax for current i, j positions
            if height[i] > lmax:
                lmax = height[i]
            if height[j] > rmax:
                rmax = height[j]
            
            #fill water upto lmax level for index i and move i to the right
            if lmax <= rmax:
                ans += lmax - height[i]
                i += 1
				
            #fill water upto rmax level for index j and move j to the left
            else:
                ans += rmax - height[j]
                j -= 1
                
        return ans
        
        
    # method - 2
    def trap(self, bars):
        if not bars or len(bars) < 3:
            return 0
        volume = 0
        left, right = 0, len(bars) - 1
        l_max, r_max = bars[left], bars[right]
        while left < right:
            if l_max <= r_max:
                volume += l_max - bars[left]
                left += 1
            else:
                volume += r_max - bars[right]
                right -= 1
            l_max, r_max = max(bars[left], l_max), max(bars[right], r_max)
        return volume


	# method - 3


def trap(self, height: List[int]) -> int: 
        if not height: return 0
        
        l, r = 0, len(height) - 1
        leftMax, rightMax = height[l], height[r]
        res = 0
        while l < r:
            if leftMax < rightMax:
                l += 1
                leftMax = max(leftMax, height[l])
                res += leftMax - height[l]
            else:
                r -= 1
                rightMax = max(rightMax, height[r])
                res += rightMax - height[r]
        return res




==========================================================================================================================================================================================

-- container with most water


-- https://leetcode.com/problems/container-with-most-water/submissions/
-- https://www.youtube.com/watch?v=UuiTKBwPgAo


--

class Solution(object):
    def maxArea(self, h):
        l = 0 
        r = len(h) - 1
        res = 0
        area = 0
        while l < r:
            res = (r-l)*(min(h[l],h[r]))
            area = max(area,res)
            if h[l]<h[r]:
                l+=1
            else:
                r-=1 
        return area

--


================================================================================================================================================

-- valid palindrome

--



--

class Solution:
    def isPalindrome(self, s: str) -> bool:
        l, r = 0, len(s) - 1
        while l < r:
            while l < r and not self.alphanum(s[l]): 
                l += 1
            while l < r and not self.alphanum(s[r]): 
                r -= 1
            if s[l].lower() != s[r].lower(): 
                return False
            l += 1
            r -= 1
        return True
    
    # Could write own alpha-numeric function
    def alphanum(self, c):
        return (ord('A') <= ord(c) <= ord('Z') or
                ord('a') <= ord(c) <= ord('z') or
                ord('0') <= ord(c) <= ord('9'))

--


==============================================================================================================================================================


