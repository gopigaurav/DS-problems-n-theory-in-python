

-- Climbing stairs

-- https://www.youtube.com/watch?v=mLfjzJsN8us&list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY&index=3
-- https://leetcode.com/problems/climbing-stairs/submissions/1200662265/


--
    def climbStairs4(self, n): 
        # bottom up approach
        dp = [-1 for _ in range(n + 1)] 
        
        def rec(step, cnt, n):
            if step == n:
                cnt += 1
                return cnt

            if step > n:
                return cnt

            if dp[step] != -1:
                return dp[step]


            dp[step] = rec(step + 1, cnt, n) + rec(step + 2, cnt, n)

            return dp[step]
        return rec(0, 0, n)
        
    def climbStairs(self, n):
        # top down approach
        # if n = 0 then to reach the destination is 1

        dp = [0] * (n + 1)

        dp[0] = 1
        dp[1] = 1

        for i in range(2, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2]

        return dp[n]



    # optimized
    def climbStairs2(self, n):     
        if n==1: return 1
        if n==2: return 2
        first = 1
        second = 2
        csum = 0
        for i in range(3, n+1):
            csum = first + second
            first = second
            second = csum
        return csum
--

===============================================================================================================================

-- 