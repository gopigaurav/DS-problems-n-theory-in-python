

-- Climbing stairs

-- https://www.youtube.com/watch?v=mLfjzJsN8us&list=PLgUwDviBIf0qUlt5H_kiKYaNSqJ81PMMY&index=3
-- https://leetcode.com/problems/climbing-stairs/submissions/1200662265/


--
    def climbStairs4(self, n): 
        # bottom up approach
        dp = [-1 for _ in range(n + 1)] 
        
        def rec(step, cnt, n):
            if step == n:
                cnt += 1
                return cnt

            if step > n:
                return cnt

            if dp[step] != -1:
                return dp[step]


            dp[step] = rec(step + 1, cnt, n) + rec(step + 2, cnt, n)

            return dp[step]
        return rec(0, 0, n)
        
    def climbStairs(self, n):
        # top down approach
        # if n = 0 then to reach the destination is 1

        dp = [0] * (n + 1)

        dp[0] = 1
        dp[1] = 1

        for i in range(2, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2]

        return dp[n]



    # optimized
    def climbStairs2(self, n):     
        if n==1: return 1
        if n==2: return 2
        first = 1
        second = 2
        csum = 0
        for i in range(3, n+1):
            csum = first + second
            first = second
            second = csum
        return csum
--

===============================================================================================================================

-- Frog jump


-- https://leetcode.com/problems/frog-jump/submissions/1200779600/
-- https://www.youtube.com/watch?v=l9E-ZcbFhDg


--
from collections import defaultdict
class Solution(object):
    def canCross(self, stones):
        """
        :type stones: List[int]
        :rtype: bool
        """
        # from current position (cp) untill it reachs the last index
        # previous jump (pj) should be used to determine the other thinks
        # current index (ci)

        mp = defaultdict(int)

        for i in range(len(stones)):
            mp[stones[i]] = i

        dp = [[-1 for _ in range(2002)] for _ in range(2002)]

        def solve(ci, pj):
            if ci == len(stones) - 1:
                return 1
            res = 0

            if dp[ci][pj] != -1:
                return dp[ci][pj]
                
            for step in range(pj - 1, pj + 2):
                
                if step > 0:
                    nextstep = stones[ci] + step

                    if mp.get(nextstep, 0):
                        res = res or solve(mp[nextstep], step)

            dp[ci][pj] = res
            return res

        return solve(0, 0)
--



==========================================================================================================================================

-- House robber


-- https://leetcode.com/problems/house-robber/
--


--class Solution(object):
    def rob1(self, nums):
        n = len(nums)
        if n == 1:
            return nums[0]
        dp = [0] * n
        dp[0] = nums[0]
        dp[1] = max(nums[1], nums[0])
        
        for i in range(2, n):
            dp[i] = max(dp[i-2] + nums[i], dp[i-1])
            
        return dp[n-1]


--


====================================================================================================================================================