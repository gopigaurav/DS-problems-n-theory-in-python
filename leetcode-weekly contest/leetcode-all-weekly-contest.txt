
====================================================================================================
-- 414 (https://www.youtube.com/watch?v=2x1k09K4oeg)


-- COnvert date to binary 


-- https://leetcode.com/problems/convert-date-to-binary/submissions/1390638305/
--


--
class Solution:
    def convertDateToBinary(self, date: str) -> str:

        def num_to_binary(n):
            num = int(n)
            ans = ""
            while num:
                if num & 1:
                    ans += "1"
                else:
                    ans += "0"
                num = num >> 1
            return ans[::-1]
        
        year = date[:4]
        month = date[5:7]
        day = date[8:]

        return num_to_binary(year) + "-" + num_to_binary(month) + "-" + num_to_binary(day)
--


==============================================================================================================

-- Maximize score of numbers in range


-- https://leetcode.com/problems/maximize-score-of-numbers-in-ranges/
--


--
from typing import List

class Solution:
    def maxPossibleScore(self, a: List[int], d: int) -> int:

        def checker(mid, num):
            temp_a = a[:]
            
            # Start at the second element and try to ensure all differences >= mid
            for i in range(1, len(temp_a)):
                if abs(temp_a[i] - temp_a[i - 1]) >= mid:
                    continue
                else:
                    # Try adding `num` to temp_a[i] to satisfy the condition
                    if abs(temp_a[i] + num - temp_a[i - 1]) < mid:
                        return False
                    temp_a[i] = temp_a[i - 1] + mid
            return True
        
        left = 0
        right = 2 * 10**9  # Max possible difference can be 2 billion (based on the input constraints)
        ans = 0

        a.sort()

        while left <= right:
            mid = (left + right) // 2
            if checker(mid, d):
                ans = mid
                left = mid + 1
            else:
                right = mid - 1

        return ans




--

=========================================================================================================================

-- Reach End of Array with Max Score


-- https://leetcode.com/problems/reach-end-of-array-with-max-score/description/
--


--
class Solution:
    def findMaximumScore(self, nums: List[int]) -> int:
        cur = nums[0]
        n = len(nums)

        ans = 0

        for i in range(1, n):
            ans += cur
            cur = max(cur, nums[i])
        
        return ans
--


==========================================================================================================================


-- Maximum number of moves to kill all pawns


-- https://leetcode.com/problems/maximum-number-of-moves-to-kill-all-pawns/
--


--
from collections import deque
import sys

# Initialize 4D array for distances (50x50x50x50)
dist = [[[[ -1 for _ in range(50)] for _ in range(50)] for _ in range(50)] for _ in range(50)]

# Possible knight moves
dx = [1, 2, 2, 1, -1, -2, -2, -1]
dy = [2, 1, -1, -2, -2, -1, 1, 2]

# Function to compute shortest distances from (startx, starty) to all other points
def dis(startx, starty):
    q = deque()
    q.append(((startx, starty), 0))  # (current position, distance)
    dist[startx][starty][startx][starty] = 0  # Distance from a point to itself is zero

    while q:
        (x, y), d = q.popleft()

        for i in range(8):
            newx, newy = x + dx[i], y + dy[i]
            # Check if new position is within bounds and not yet visited
            if 0 <= newx < 50 and 0 <= newy < 50 and dist[startx][starty][newx][newy] == -1:
                dist[startx][starty][newx][newy] = d + 1
                q.append(((newx, newy), d + 1))

# Function to preprocess distances for all pairs of points
def pre():
    global dist
    if dist[0][0][0][0] != -1:  # Already preprocessed
        return

    for i in range(50):
        for j in range(50):
            if dist[i][j][i][j] == -1:
                dis(i, j)

class Solution:
    def __init__(self):
        self.dp = None  # Memoization table

    # Recursive function to compute maximum/minimum score
    def f(self, curr, mask, turn, positions):
        n = len(positions)
        if mask == (1 << n) - 1:  # All positions visited, base case
            return 0

        if self.dp[curr][mask][turn] != -1:  # Check if result is already computed
            return self.dp[curr][mask][turn]

        x, y = positions[curr]
        if turn == 0:  # Alice's turn
            ans = -sys.maxsize  # Initialize to minimum value
            for i in range(n):
                if mask & (1 << i):  # Skip if position already visited
                    continue
                nextx, nexty = positions[i]
                newDist = dist[x][y][nextx][nexty]  # Distance to next position
                ans = max(ans, newDist + self.f(i, mask | (1 << i), 1, positions))  # Maximize Alice's score
        else:  # Bob's turn
            ans = sys.maxsize  # Initialize to maximum value
            for i in range(n):
                if mask & (1 << i):  # Skip if position already visited
                    continue
                nextx, nexty = positions[i]
                newDist = dist[x][y][nextx][nexty]  # Distance to next position
                ans = min(ans, newDist + self.f(i, mask | (1 << i), 0, positions))  # Minimize Bob's score

        self.dp[curr][mask][turn] = ans
        return ans

    # Function to start the solution
    def maxMoves(self, kx, ky, positions):
        positions.append([kx, ky])  # Add knight's starting position
        n = len(positions)  # Total number of positions
        pre()  # Preprocess distances

        # Initialize dp (memoization table)
        self.dp = [[[-1 for _ in range(2)] for _ in range(1 << n)] for _ in range(n)]
        return self.f(n - 1, 1 << (n - 1), 0, positions)


--



====================================================================================================================================



############################### 413 ##############################################################################################


-- Check if two chessboard squares have the same color

-- https://leetcode.com/problems/check-if-two-chessboard-squares-have-the-same-color/submissions/1390780210/
--


--
class Solution:
    def checkTwoChessboards(self, c1: str, c2: str) -> bool:
        
        m = {
            "a": 1,
            "b": 2,
            "c": 3,
            "d": 4,
            "e": 5,
            "f": 6,
            "g": 7,
            "h": 8
        }

        ch1 = c1[0]
        ch2 = c2[0]

        n1 = c1[1]
        n2 = c2[1]

        rem1 = (m[ch1] + int(n1)) % 2

        rem2 = (m[ch2] + int(n2)) % 2

        if rem1 == rem2:
            return True
        return False  
--

==========================================================================================================================


-- kth nearest obstacel qurries


-- https://leetcode.com/problems/k-th-nearest-obstacle-queries/
--


--
from heapq import heappop, heappush

class Solution:
    def resultsArray(self, a: List[List[int]], k: int) -> List[int]:
        res = []
        maxheap = []

        for i in range(len(a)):
            # Compute the sum of absolute values
            total_sum = abs(a[i][0]) + abs(a[i][1])
            
            # Use negative values to simulate a max-heap (Python has min-heap by default)
            heappush(maxheap, -total_sum)
            
            # If we haven't processed 'k' points yet, append -1
            if i + 1 < k:
                res.append(-1)
            else:
                # When the heap has more than 'k' elements, remove the largest (negative smallest)
                if len(maxheap) > k:
                    heappop(maxheap)
                
                # The root of the max-heap will be the k-th largest (smallest k-th sum)
                res.append(-maxheap[0])

        return res

--

==============================================================================================================================

-- Select cells in grid with maximum score


--https://leetcode.com/problems/select-cells-in-grid-with-maximum-score/description/
--


--
class Solution:
    def __init__(self):
        self.a = []
        self.dp = []

    def calc(self, n, mask):
        if n == 0:
            return 0
        if self.dp[n][mask] != -1:
            return self.dp[n][mask]
        
        # Compute the result by skipping the current number n
        ans = self.calc(n - 1, mask)
        
        # Try including the number n in various rows
        for x in self.a[n]:
            if mask & (1 << x):
                continue
            ans = max(ans, n + self.calc(n - 1, mask | (1 << x)))
        
        self.dp[n][mask] = ans
        return ans

    def maxScore(self, grid):
        n = len(grid)
        m = len(grid[0])
        
        # Initialize DP table and row usage lists
        self.dp = [[-1] * (1 << n) for _ in range(101)]
        self.a = [[] for _ in range(101)]
        
        # Determine the maximum number in the grid
        maxi = 0
        
        # Fill the list `a` where a[i] stores the rows where number i appears
        # listing out the numbers as keys and index as the values
        # { 1: [0, 1]} number 1 is found in index 0 and index 1
        for i in range(n):
            for j in range(m):
                self.a[grid[i][j]].append(i)
                maxi = max(maxi, grid[i][j])
        
        return self.calc(maxi, 0)

--


============================================================================================================================


-- Maximum xor score subarray queries


--
-- https://leetcode.com/problems/maximum-xor-score-subarray-queries/


--
class Solution:
    def maximumSubarrayXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        n = len(nums)
        xor_value = [[0 for _ in range(n + 1)] for _ in range(n + 1)]

        # based on the lengthgth
        for length in range(1, n + 1):
            for i in range(n):
                if length == 1:
                    xor_value[i][length] = nums[i]

                else:
                    if i + length > n:
                        xor_value[i][length] = 0
                    else:
                        xor_value[i][length] = xor_value[i][length - 1] ^ xor_value[i + 1][length - 1]

        
        dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]

        for length in range(1, n + 1):
            for i in range(n):
                if length == 1:
                    dp[i][length] = xor_value[i][length]

                else:
                    dp[i][length] = max(dp[i][length - 1], dp[i + 1][length - 1], xor_value[i][length])

        res = []

        for i in queries:
            l = i[0]
            r = i[1]

            lengthgth = r - l + 1

            res.append(dp[l][lengthgth])

        return res        


        
--


###########################  412 ################################################################################

-- https://www.youtube.com/watch?v=HY46DPDmJXo




-- Final Array State after K multiplication Operations


--
-- https://leetcode.com/problems/final-array-state-after-k-multiplication-operations-i/


--
class Solution:
    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:
        n = len(nums)
        while k:
            index = 0
            val = nums[0]
            for i in range(1, n):
                if nums[i] < val:
                    index = i
                    val = nums[i]
            
            nums[index] *= multiplier

            k -= 1
        
        return nums
--


==========================================================================================================


-- Count Amost Equal Pairs I


-- https://leetcode.com/problems/count-almost-equal-pairs-i/description/
-- https://www.youtube.com/watch?v=HY46DPDmJXo


--
from typing import List

class Solution:
    def countPairs(self, nums: List[int]) -> int:
        # Find the maximum number in the array
        n = len(nums)
        maxi = max(nums)
        
        # Determine the number of digits of the maximum number
        digits = len(str(maxi))

        # Pad numbers with leading zeros to match the length of the largest number
        def make_digits(num, max_digits):
            num_str = str(num)
            return num_str.zfill(max_digits)

        # Generate all possible swaps of digits in the number
        def make_swap(num_str):
            s = set()
            num_list = list(num_str)  # Convert string to list for swapping
            s.add(num_str)

            for i in range(len(num_list)):
                for j in range(i + 1, len(num_list)):
                    if num_list[i] != num_list[j]:
                        # Swap the digits
                        num_list[i], num_list[j] = num_list[j], num_list[i]
                        s.add("".join(num_list))  # Add the new combination as a string
                        # Swap back to revert to the original state
                        num_list[j], num_list[i] = num_list[i], num_list[j]

            return s

        # Pad all numbers in the array
        arr = [make_digits(num, digits) for num in nums]

        ans = 0
        # Check for each pair (i, j)
        for i in range(len(arr)):
            for j in range(i + 1, len(arr)):
                swapped_set = make_swap(arr[j])

                # If the swapped set contains the i-th number, we count it as a valid pair
                if arr[i] in swapped_set:
                    ans += 1

        return ans

--


============================================================================================================

-- Final Array State AFter K multiplication


-- https://leetcode.com/problems/final-array-state-after-k-multiplication-operations-ii/description/
--


--
class Solution:
    def getFinalState1(self, nums: List[int], k: int, multiplier: int) -> List[int]:
        n = len(nums)
        while k:
            index = 0
            val = nums[0]
            for i in range(1, n):
                if nums[i] < val:
                    index = i
                    val = nums[i]
            
            nums[index] *= multiplier

            k -= 1
        
        for i in range(n):
            nums[i] = nums[i] % (10**9 + 7)
        
        return nums

    def getFinalState2(self, nums: List[int], k: int, multiplier: int) -> List[int]:
        MOD = 10**9 + 7
        
        # Perform k operations
        for _ in range(k):
            # Find the minimum value and its index
            min_index = nums.index(min(nums))
            # Replace it with its value multiplied by the multiplier
            nums[min_index] *= multiplier
        
        # Apply modulo to all elements
        nums = [num % MOD for num in nums]
        
        return nums

    import heapq

    def getFinalState(self, A: List[int], K: int, M: int) -> List[int]:
        if M == 1: return A

        MOD = 10 ** 9 + 7
        N = len(A)
        
        # create the array with (num, index) of Array A
        B = [[x, i] for i,x in enumerate(A)]

        # heapify B
        heapify(B)
        count = [0] * N
        

        while K and B[0][0] <= 1e9:
            K -= 1
            b, i = heappop(B)
            count[i] += 1
            heappush(B, [b * M, i])
        
        q, r = divmod(K, N)
        B.sort()
        for ix, (b, i) in enumerate(B):
            count[i] += q + (ix < r)
        
        for i, c in enumerate(count):
            A[i] *= pow(M, c, MOD)
            A[i] %= MOD
        
        return A
--


===========================================================================================================

-- Find the diff 


-- https://leetcode.com/problems/find-the-difference/submissions/1391983785/
--


--
class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        m = {}

        for c in t:
            m[c] = m.get(c, 0) + 1
        
        for c in s:
            m[c] -= 1
            if m[c] == 0:
                del m[c]
        
        return list(m.keys())[0]
--


============================================================================================================

-- Is Subsequence


-- https://leetcode.com/problems/is-subsequence/
--


--
class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        
        i = 0
        j = 0

        n = len(s)
        m = len(t)
        while i < n and j < m:
            if s[i] == t[j]:
                i += 1
                j += 1
            else:
                j += 1
        
        if i < n:
            return False
        return True

                
--

============================================================================================================

-- Binary watch


-- https://leetcode.com/problems/binary-watch/
--

--
class Solution:
    def readBinaryWatch(self, num: int) -> List[str]:
        return ['%d:%02d' % (h, m)
                for h in range(12) for m in range(60)
                if (bin(h) + bin(m)).count('1') == num]
--


===============================================================================================================


-- Sum of left


--
-- https://leetcode.com/problems/sum-of-left-leaves/submissions/1392030096/

--
class Solution:
    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:

        def dfs(node, is_left):
            if not node:
                return 0

            if not node.left and not node.right and is_left:
                return node.val
            
            left = dfs(node.left, True)
            right = dfs(node.right, False)

            return left + right
        
        return dfs(root, False)
--


===================================================================================================================

-- Convert a number to hexadecimal


-- https://leetcode.com/problems/convert-a-number-to-hexadecimal/
--

--
class Solution:
    def toHex(self, num: int) -> str:
        # If the input number is zero, return '0'
        if num == 0:
            return '0'
        # If the input number is negative, convert it to its corresponding positive value using two's complement
        if num < 0:
            num = (1 << 32) + num
        
        hex_digits = '0123456789abcdef'  # The hexadecimal digits
        
        hex_num = ''  # Initialize an empty string to store the hexadecimal representation of the input number
        
        # Repeatedly divide the input number by 16 and convert the remainder to its corresponding hexadecimal digit until the quotient becomes zero
        while num > 0:
            digit = num % 16  # Get the remainder of dividing the input number by 16
            hex_digit = hex_digits[digit]  # Convert the remainder to its corresponding hexadecimal digit
            hex_num = hex_digit + hex_num  # Add the hexadecimal digit to the beginning of the hexadecimal representation
            num //= 16  # Update the input number by dividing it by 16
        
        return hex_num

        
--


==================================================================================================================


-- Ransom Note


--
-- https://leetcode.com/problems/ransom-note/

--
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        m = {}

        for i in magazine:
            m[i] = m.get(i, 0) + 1

        for ch in ransomNote:
            if ch not in m:
                return False
            m[ch] -= 1
            if m[ch] == 0:
                del m[ch]
        return True
--


======================================================================================================================

-- First unique character in a string


-- https://leetcode.com/problems/first-unique-character-in-a-string/submissions/1392061101/
--


--
class Solution:
    def firstUniqChar(self, s: str) -> int:
        m = {}

        for j in s:
            m[j] = m.get(j, 0) + 1
        
        for i, ch in enumerate(s):
            if m[ch] == 1:
                return i
        return -1
--

=====================================================================================================================

-- Guess the number higher or lower


-- https://leetcode.com/problems/guess-number-higher-or-lower/
--


--
# The guess API is already defined for you.
# @param num, your guess
# @return -1 if num is higher than the picked number
#          1 if num is lower than the picked number
#          otherwise return 0
# def guess(num: int) -> int:

class Solution:
    def guessNumber(self, n: int) -> int:
        low, high = 1, n
    
        while low <= high:
            mid = low + (high - low) // 2  # Calculate mid to avoid overflow
            result = guess(mid)
            
            if result == 0:
                return mid  # Found the correct number
            elif result == -1:
                high = mid - 1  # Guess is too high, reduce the upper bound
            else:
                low = mid + 1
        
--


============================================================================================================================


--Third maximum number


-- https://leetcode.com/problems/third-maximum-number/
--

-
class Solution:
    def thirdMax(self, nums: List[int]) -> int:
        n = len(nums)
        result = 0

        Max = max(nums)
        secondMax = min(nums) # get the min value to get the maximum for now
        thirdMax = float("-inf")

        for i in range(n):
            if nums[i] < Max and nums[i]  > secondMax:
                thirdMax = secondMax
                secondMax = nums[i]
            elif nums[i] < secondMax and nums[i] > thirdMax:
                thirdMax = nums[i]
            else:
                pass

        if len(set(nums)) >= 3:
            result = thirdMax
        else:
            result = Max
        return result

        
-

=======================================================================================================================


-- Add string


--
-- https://leetcode.com/problems/add-strings/


--
class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
        

        carry = 0

        n1 = len(num1)
        n2 = len(num2)
        i = n1 - 1
        j = n2 - 1
        res = ""

        while i >= 0 and j >= 0:
            x1 = int(num1[i])
            x2 = int(num2[j])
            temp_sum = x1 + x2 + carry

            print(temp_sum, x1, x2)

            carry = temp_sum // 10  # Update carry
            res += str(temp_sum % 10)
            i -= 1
            j -= 1

        while i >= 0:
            temp_sum = int(num1[i]) + carry
            carry = temp_sum // 10
            res += str(temp_sum % 10)
            i -= 1
        
        while j >= 0:
            temp_sum = int(num2[j]) + carry
            carry = temp_sum // 10
            res += str(temp_sum % 10)
            j -= 1

        if carry:
            res += str(carry)

        return res[::-1]



--


================================================================================================================================


-- Number of segments in a string


-- https://leetcode.com/problems/number-of-segments-in-a-string/
--


--
import re
class Solution:
    def countSegments(self, s: str) -> int:
        segments = [segment for segment in s.split(' ') if segment]
        return len(segments)
--



============================================================================================================================

-- Arranging Coins


-- https://leetcode.com/problems/arranging-coins/
--

--
class Solution:
    def arrangeCoins(self, n: int) -> int:
        left,right=1,n
        while left<=right:
            mid=(right+left)//2
            num=(mid/2)*(mid+1)
            if num<=n:
                left=mid+1
            else:
                right=mid-1
        return right
--

--
class Solution:
    def arrangeCoins(self, n: int) -> int:
        # Using the quadratic formula to solve for k
        k = (-1 + math.sqrt(1 + 8 * n)) // 2
        return int(k)
--

===========================================================================================================================


-- Assign Cookies


-- https://leetcode.com/problems/assign-cookies/
--

--
class Solution:
    def findContentChildren(self, g: List[int], s: List[int]) -> int:
        g.sort()
        s.sort()

        i = 0
        j = 0
        n = len(g)
        m = len(s)
        ans = 0

        while i < n and j < m:
            if g[i] <= s[j]:
                ans += 1
                i += 1
                j += 1
            else:
                j += 1
        
        return ans

--


========================================================================================================================

-- repeated substring pattern


-- https://leetcode.com/problems/repeated-substring-pattern/
--


--
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        # Get the length of the string
        n = len(s)
        
        # Loop to check for all possible lengths of the repeating substring
        for i in range(1, n // 2 + 1):
            # If n is divisible by i, then s[:i] can be a candidate substring
            if n % i == 0:
                # Create the repeated string by multiplying the substring
                if s[:i] * (n // i) == s:
                    return True
        
        return False
--


==============================================================================================================================

-- Hamming distance


-- https://leetcode.com/problems/hamming-distance/
--


--
class Solution:
    def hammingDistance(self, x: int, y: int) -> int:
        bin_x = ""
        while x:
            if x & 1:
                bin_x += "1"
            else:
                bin_x += "0"
            x = x // 2

        bin_y = ""
        while y:
            if y & 1:
                bin_y += "1"
            else:
                bin_y += "0"
            y = y // 2

        # Pad the shorter binary string with zeros
        max_len = max(len(bin_x), len(bin_y))
        bin_x = bin_x.ljust(max_len, "0")
        bin_y = bin_y.ljust(max_len, "0")

        ans = 0
        for i in range(max_len):
            if bin_x[i] != bin_y[i]:  # Count differing bits
                ans += 1

        return ans


    def hammingDistance1(self, x: int, y: int) -> int:

        xor = x ^ y

        return bin(xor).count("1")
--


===============================================================================================================================


-- Island Perimeter


-- https://leetcode.com/problems/island-perimeter/description/
--

--
class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:

        # first check the cell if cell is 1 add 4 as perimeter
        # if 1 -> check for the the adjacent cells as well only for left and up that too only in two direction

        n = len(grid)
        m = len(grid[0])

        perimeter = 0

        for i in range(n):
            for j in range(m):

                if grid[i][j] == 1:
                    perimeter += 4

                    # check for the upper cell 
                    if i > 0 and grid[i - 1][j] == 1:
                        perimeter -= 2
                    
                    if j > 0 and grid[i][j - 1] == 1:
                        perimeter -= 2
                
        return perimeter
--


=======================================================================================================================


-- Number complement

-- https://leetcode.com/problems/number-complement/submissions/1393379936/
--

-
class Solution:
    def findComplement(self, num: int) -> int:
        # first get a new number with all the bit set to 1

        bit_length = num.bit_length()

        # Create a mask with all bits set to 1, which has the same length as the binary representation of num
        new = (1 << bit_length) - 1
        return new ^ num-

===========================================================================================================================


-- License key formatting


-- https://leetcode.com/problems/license-key-formatting/submissions/1393422186/
--

-
class Solution:
    def licenseKeyFormatting(self, s: str, k: int) -> str:
        
        s = s.replace('-', '').upper()
        
        # Find out how many characters will be in the first group
        first_group_len = len(s) % k or k  # If len(s) % k == 0, first group has k characters

        # Start by creating the first group
        formatted = [s[:first_group_len]]

        # Process the rest of the groups of size k
        for i in range(first_group_len, len(s), k):
            formatted.append(s[i:i + k])

        # Join all the groups with dashes
        return '-'.join(formatted)
-

============================================================================================================================

-- Max consecutive ones


-- https://leetcode.com/problems/max-consecutive-ones/
--


--
class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        n = len(nums)
        cnt = 0
        ans = 0
        for i in range(n):
            if nums[i] == 1:
                cnt += 1
                ans= max(cnt, ans)
            else:
                cnt = 0
        
        return ans
--


===============================================================================================================================

-- Longest palindrome


-- https://leetcode.com/problems/longest-palindrome/
--


--
class Solution:
    def longestPalindrome(self, s: str) -> int:
        char_count = {}
        
        # Count frequency of each character
        for char in s:
            if char in char_count:
                char_count[char] += 1
            else:
                char_count[char] = 1
        
        length_of_palindrome = 0
        odd_count_found = False
        
        # Calculate the length of the longest palindrome
        for count in char_count.values():
            if count % 2 == 0:
                length_of_palindrome += count
            else:
                length_of_palindrome += count - 1
                odd_count_found = True
        
        # If there was at least one character with an odd count, we can place one in the middle
        if odd_count_found:
            length_of_palindrome += 1
        
        return length_of_palindrome
--

===============================================================================================================================

-- Fizz buzz


-- https://leetcode.com/problems/fizz-buzz/
--


--
class Solution:
    def fizzBuzz(self, n: int) -> List[str]:

        res = []
        for i in range(1, n + 1):
            if i % 3 == 0 and i % 5 == 0:
                res.append("FizzBuzz")
            elif i % 3 == 0:
                res.append("Fizz")
            elif i % 5 == 0:
                res.append("Buzz")
            else:
                res.append(str(i))
        return res



        
--


===========================================================================================================================


-- Valid perfect squares


-- https://leetcode.com/problems/valid-perfect-square/
--


--
class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        
        left = 0
        right = num

        while left <= right:
            mid = (left + right)//2
            sq = mid * mid 

            if sq == num:
                return True
            elif sq < num:
                left = mid + 1
            else:
                right = mid - 1
        return False


--


==============================================================================================================================